from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QColor, QPixmap
import sys
import random

y = 4
x = 4
score = 0
best = 0
merge_cnt = 0
clrtheme = 'classic'
changes = False
curwin = 0
newwin = 1

class MainWindow(QMainWindow):
    global curwin
    global newwin
    def __init__(self):
        super().__init__()
        self.tilesize = 150
        self.fonts_parent = QLabel(self)
        self.score_plain_font = self.fonts_parent.font()
        self.score_plain_font.setPointSize(14)
        self.tile_font = self.fonts_parent.font()
        self.tile_font.setPointSize(40)
        self.tile_font.setBold(True)
        self.icon_font = self.fonts_parent.font()
        self.icon_font.setPointSize(50)
        self.icon_font.setBold(True)
        self.action_timer = QTimer()
        self.action_timer.setInterval(250)
        self.action_timer.timeout.connect(self.enable_moving)
        self.menu_timer = QTimer()
        self.menu_timer.setInterval(300)
        self.menu_timer.timeout.connect(self.enable_menu_moving)
        self.window_timer = QTimer()
        self.window_timer.setInterval(600)
        self.window_timer.timeout.connect(self.move_window)
        
        self.setWindowTitle("2048")
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.desk_w = QApplication.desktop().width()
        self.desk_h = QApplication.desktop().height()
        self.clr_change('classic')
        self.new_game(x, y)

        self.mode_window_title = QLabel(self)
        self.mode_window_title2 = QLabel(self)
        self.mode_window_title.setFont(self.icon_font)
        self.mode_window_title.setAlignment(Qt.AlignBottom | Qt.AlignHCenter)
        self.mode_window_title.setStyleSheet('color: %s' % self.text_color1)
        self.mode_window_title.setText("выбор режима игры")
        self.mode_window_title.setGeometry(QRect(600 - self.desk_w, 50, 1200, 100))

        self.menu_font = self.fonts_parent.font()
        self.menu_font.setPointSize(30)
        self.menu_font.setBold(True)
        self.menu_pad = QWidget(self)
        self.menu_pad.setStyleSheet("background-color: %s" % self.pad_color)
        self.menu_pad.setGeometry(-350, 0, 500, self.desk_h)
        self.menu_menu = QWidget(self)
        self.menu_menu.setStyleSheet("background-color: %s; border-radius: 75px" % self.tile_color2)
        self.menu_menu.setGeometry(-450, 25, 600, 150)
        self.menu_txt = QLabel(self)
        self.menu_txt.setStyleSheet("background-color: %s; color: %s" % (self.tile_color2, self.text_color1))
        self.menu_txt.setGeometry(-350, 50, 350, 100)
        self.menu_txt.setFont(self.icon_font)
        self.menu_txt.setAlignment(Qt.AlignBottom | Qt.AlignHCenter)
        self.menu_txt.setText("меню")
        self.menu_rnd = QLabel(self)
        self.menu_rnd.setStyleSheet("background-color: %s; border-radius: 60" % self.tile_color2)
        self.menu_rnd.setGeometry(10, 40, 120, 120)
        self.menu_rnd.setPixmap(self.menu_btn_png)
        self.menu_btn = QPushButton(self)
        self.menu_btn.setStyleSheet("background-color: %s; border-radius: 75px" % self.tile_color2)
        self.menu_btn.setGeometry(-450, 25, 600, 150)
        self.menu_btn.clicked.connect(self.move_menu)
        self.menu_btn.setGraphicsEffect(self.opacity)
        self.menu_game_h = QWidget(self)
        self.menu_mode_h = QWidget(self)
        self.menu_theme_h = QWidget(self)
        self.menu_achievments_h = QWidget(self)
        self.menu_rules_h = QWidget(self)
        self.menu_stats_h = QWidget(self)
        self.menu_tile = QWidget(self)
        self.menu_game = QPushButton(self, text='игра')
        self.menu_mode = QPushButton(self, text='режим')
        self.menu_theme = QPushButton(self, text='тема')
        self.menu_achievments = QPushButton(self, text='достижения')
        self.menu_rules = QPushButton(self, text='правила')
        self.menu_stats = QPushButton(self, text='статистика')
        self.menu_exit = QPushButton(self, text='выход')
        self.menu_game.clicked.connect(self.window_change_game)
        self.menu_mode.clicked.connect(self.window_change_mode)
        self.menu_game.setFont(self.menu_font)
        self.menu_mode.setFont(self.menu_font)
        self.menu_theme.setFont(self.menu_font)
        self.menu_achievments.setFont(self.menu_font)
        self.menu_rules.setFont(self.menu_font)
        self.menu_stats.setFont(self.menu_font)
        self.menu_exit.setFont(self.menu_font)
        self.menu_game.setStyleSheet("background-color: rgba(0, 0, 0, 0.0); color: %s" % self.text_color1)
        self.menu_mode.setStyleSheet("background-color: rgba(0, 0, 0, 0.0); color: %s" % self.text_color1)
        self.menu_theme.setStyleSheet("background-color: rgba(0, 0, 0, 0.0); color: %s" % self.text_color1)
        self.menu_achievments.setStyleSheet("background-color: rgba(0, 0, 0, 0.0); color: %s" % self.text_color1)
        self.menu_rules.setStyleSheet("background-color: rgba(0, 0, 0, 0.0); color: %s" % self.text_color1)
        self.menu_stats.setStyleSheet("background-color: rgba(0, 0, 0, 0.0); color: %s" % self.text_color1)
        self.menu_game.setGeometry(-475, 200, 450, 100)
        self.menu_mode.setGeometry(-475, 325, 450, 100)
        self.menu_theme.setGeometry(-475, 450, 450, 100)
        self.menu_achievments.setGeometry(-475, 575, 450, 100)
        self.menu_rules.setGeometry(-475, 700, 450, 100)
        self.menu_stats.setGeometry(-475, 825, 450, 100)
        self.menu_exit.setGeometry(-475, 1000, 450, 100)
        self.menu_game_h.setStyleSheet("background-color: %s; border-radius: 10px" % self.hollow_color)
        self.menu_mode_h.setStyleSheet("background-color: %s; border-radius: 10px" % self.hollow_color)
        self.menu_theme_h.setStyleSheet("background-color: %s; border-radius: 10px" % self.hollow_color)
        self.menu_achievments_h.setStyleSheet("background-color: %s; border-radius: 10px" % self.hollow_color)
        self.menu_rules_h.setStyleSheet("background-color: %s; border-radius: 10px" % self.hollow_color)
        self.menu_stats_h.setStyleSheet("background-color: %s; border-radius: 10px" % self.hollow_color)
        self.menu_exit.setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (self.tile_color32, self.text_color2))
        self.menu_tile.setStyleSheet("background-color: %s; border-radius: 10px" % self.tile_color2)
        self.menu_tile.setGeometry(-475, 200, 450, 100)
        self.menu_game_h.setGeometry(-475, 200, 450, 100)
        self.menu_mode_h.setGeometry(-475, 325, 450, 100)
        self.menu_theme_h.setGeometry(-475, 450, 450, 100)
        self.menu_achievments_h.setGeometry(-475, 575, 450, 100)
        self.menu_rules_h.setGeometry(-475, 700, 450, 100)
        self.menu_stats_h.setGeometry(-475, 825, 450, 100)
        self.menu_widgets = (self.menu_menu, self.menu_btn, self.menu_pad, self.menu_rnd, self.menu_txt)
        self.menu_points = (self.menu_game, self.menu_mode, self.menu_theme, self.menu_achievments, self.menu_rules, self.menu_stats,
                            self.menu_game_h, self.menu_mode_h, self.menu_theme_h, self.menu_achievments_h, self.menu_rules_h, self.menu_stats_h,
                            self.menu_exit, self.menu_tile)
        self.game_widgets = (self.tiles_lst, self.hollows_lst, 
                            self.bg_plain, self.best_plain, self.score_plain, self.icon, self.score_value, self.best_value)
        self.mode_widgets = (self.mode_window_title, self.mode_window_title2)
        self.windows = (self.game_widgets, self.mode_widgets)
        self.windows_btns = (self.menu_game, self.menu_mode)

    def window_change_game(self):
        global newwin
        if not curwin == 0:
            newwin = 0
            self.window_change()

    def window_change_mode(self):
        global newwin
        if not curwin == 1:
            newwin = 1
            self.window_change()   

    def window_change(self):
        self.windows_btns[newwin].setDisabled(True)
        window_anim_group = QParallelAnimationGroup(self)
        for widget in self.windows[curwin]:
            if isinstance(widget, list):
                for i in range(y):
                    for j in range(x):
                        window_anim = QPropertyAnimation(widget[i][j][0], b"pos")
                        window_anim.setEasingCurve(QEasingCurve.OutCubic)
                        window_anim.setEndValue(QPoint(widget[i][j][0].x(), widget[i][j][0].y() + self.desk_h))
                        window_anim.setDuration(500)
                        window_anim_group.addAnimation(window_anim)
            else:
                window_anim = QPropertyAnimation(widget, b"pos")
                window_anim.setEasingCurve(QEasingCurve.OutCubic)
                window_anim.setEndValue(QPoint(widget.x(), widget.y() + self.desk_h))
                window_anim.setDuration(500)
                window_anim_group.addAnimation(window_anim)
        for widget in self.windows[newwin]:
            if isinstance(widget, list):
                for i in range(y):
                    for j in range(x):
                        window_anim = QPropertyAnimation(widget[i][j][0], b"pos")
                        window_anim.setEasingCurve(QEasingCurve.OutCubic)
                        window_anim.setEndValue(QPoint(widget[i][j][0].x() + self.desk_w, widget[i][j][0].y()))
                        window_anim.setDuration(600)
                        window_anim_group.addAnimation(window_anim)
            else: 
                window_anim = QPropertyAnimation(widget, b"pos")
                window_anim.setEasingCurve(QEasingCurve.OutCubic)
                window_anim.setEndValue(QPoint(widget.x() + self.desk_w, widget.y()))
                window_anim.setDuration(600)
                window_anim_group.addAnimation(window_anim)
        menu_tile_anim = QPropertyAnimation(self.menu_tile, b"pos")
        menu_tile_anim.setEasingCurve(QEasingCurve.OutCubic)
        menu_tile_anim.setEndValue(QPoint(25, 200 + 125 * newwin))
        menu_tile_anim.setDuration(400)
        window_anim_group.addAnimation(menu_tile_anim)
        window_anim_group.start()
        self.window_timer.start()

    def move_window(self):
        global curwin
        global newwin
        self.windows_btns[newwin].setDisabled(False)
        window_anim_group = QParallelAnimationGroup(self)
        for widget in self.windows[curwin]:
            if isinstance(widget, list):
                for i in range(y):
                    for j in range(x):
                        window_anim = QPropertyAnimation(widget[i][j][0], b"pos")
                        window_anim.setEndValue(QPoint(widget[i][j][0].x() - self.desk_w, widget[i][j][0].y() - self.desk_h))
                        window_anim.setDuration(0)
                        window_anim_group.addAnimation(window_anim)
            else:
                window_anim = QPropertyAnimation(widget, b"pos")
                window_anim.setEndValue(QPoint(widget.x() - self.desk_w, widget.y() - self.desk_h))
                window_anim.setDuration(0)
                window_anim_group.addAnimation(window_anim)
        window_anim_group.start()
        curwin = newwin
        self.window_timer.stop()
            
    def move_menu(self):
        menu_anim_group = QParallelAnimationGroup(self)
        if self.menu_pad.x() == 0:
            shift1 = -350
            shift2 = -500
        else:
            shift1 = 350
            shift2 = 500
        for widget in self.menu_widgets:
            menu_anim = QPropertyAnimation(widget, b"pos")
            menu_anim.setEasingCurve(QEasingCurve.OutCubic)
            menu_anim.setEndValue(QPoint(widget.x() + shift1, widget.y()))
            menu_anim.setDuration(300)
            menu_anim_group.addAnimation(menu_anim)
        for widget in self.menu_points:
            menu_anim = QPropertyAnimation(widget, b"pos")
            menu_anim.setEasingCurve(QEasingCurve.OutCubic)
            menu_anim.setEndValue(QPoint(widget.x() + shift2, widget.y()))
            menu_anim.setDuration(400)
            menu_anim_group.addAnimation(menu_anim)
        menu_anim_group.start()
        self.menu_btn.setEnabled(False)
        self.menu_timer.start()
        
    def clr_change(self, clrtheme: str):
        if clrtheme == "classic":
            self.tile_color2 = QColor(238, 228, 218).name()
            self.tile_color4 = QColor(238, 225, 201).name()
            self.tile_color8 = QColor(243, 178, 122).name()
            self.tile_color16 = QColor(246, 150, 100).name()
            self.tile_color32 = QColor(247, 124, 95).name()
            self.tile_color64 = QColor(247, 95, 59).name()
            self.tile_color128 = QColor(248, 214, 105).name()
            self.tile_color256 = QColor(248, 223, 90).name()
            self.tile_color512 = QColor(255, 224, 62).name()
            self.tile_color1024 = QColor(255, 218, 24).name()
            self.tile_color2048 = QColor(255, 214, 0).name()
            self.pad_color = QColor(187, 173, 160).name()
            self.text_color1 = QColor(119, 110, 101).name()
            self.text_color2 = QColor(249, 246, 242).name()
            self.hollow_color = QColor(205, 193, 180).name()
            self.opacity = QGraphicsOpacityEffect()
            self.opacity.setOpacity(0)
            self.menu_btn_png = QPixmap('menu_btn_classic.png')
            self.menu_btn_png = self.menu_btn_png.scaled(120, 120)
            self.menu_btn_png.setMask(self.menu_btn_png.createHeuristicMask(Qt.transparent))

    def move_tiles(self, game_area: list[list], tiles_lst: list[list], direction: str):
        global changes
        global score
        changes = False
        if direction == 'left':
            for i in range(y):
                for j in range(x):
                    if game_area[i][j][0] == None or j == 0:
                        continue
                    cur_pos, new_pos = j, j-1
                    while new_pos != -1 and game_area[i][new_pos][0] == None:
                        new_pos -= 1
                    if new_pos == -1:
                        new_pos += 1
                        game_area[i][new_pos] = game_area[i][cur_pos]
                        game_area[i][cur_pos] = [None, 2]
                        changes = True
                    elif game_area[i][new_pos][1] == game_area[i][cur_pos][1]:
                        game_area[i][new_pos][1] *= 2
                        score += game_area[i][new_pos][1]
                        for r in range(y):
                            for c in range(x):
                                if tiles_lst[r][c][0] == game_area[i][cur_pos][0]:
                                    tiles_lst[r][c][2] = False
                                    break
                        game_area[i][cur_pos] = [None, 2]
                        changes = True
                    elif game_area[i][new_pos][1] != game_area[i][cur_pos][1]:
                        if game_area[i][j-1][0] != None:
                            continue
                        new_pos += 1
                        game_area[i][new_pos] = game_area[i][cur_pos]
                        game_area[i][cur_pos] = [None, 2]
                        changes = True

        if direction == 'right':
            for i in range(y):
                for j in range(x - 1, -1, -1):
                    if game_area[i][j][0] == None or j == x - 1:
                        continue
                    cur_pos, new_pos = j, j+1
                    while new_pos != x and game_area[i][new_pos][0] == None:
                        new_pos += 1
                    if new_pos == x:
                        new_pos -= 1
                        game_area[i][new_pos] = game_area[i][cur_pos]
                        game_area[i][cur_pos] = [None, 2]
                        changes = True
                    elif game_area[i][new_pos][1] == game_area[i][cur_pos][1]:
                        game_area[i][new_pos][1] *= 2
                        score += game_area[i][new_pos][1]
                        for r in range(y):
                            for c in range(x):
                                if tiles_lst[r][c][0] == game_area[i][cur_pos][0]:
                                    tiles_lst[r][c][2] = False
                                    break
                        game_area[i][cur_pos] = [None, 2]
                        changes = True
                    elif game_area[i][new_pos][1] != game_area[i][cur_pos][1]:
                        if game_area[i][j+1][0] != None:
                            continue
                        new_pos -= 1
                        game_area[i][new_pos] = game_area[i][cur_pos]
                        game_area[i][cur_pos] = [None, 2]
                        changes = True

        if direction == 'down':
            for j in range(x):
                for i in range(y - 1, -1, -1):
                    if game_area[i][j][0] == None or i == y - 1:
                        continue
                    cur_pos, new_pos = i, i+1
                    while new_pos != y and game_area[new_pos][j][0] == None:
                        new_pos += 1
                    if new_pos == y:
                        new_pos -= 1
                        game_area[new_pos][j] = game_area[cur_pos][j]
                        game_area[cur_pos][j] = [None, 2]
                        changes = True
                    elif game_area[new_pos][j][1] == game_area[cur_pos][j][1]:
                        game_area[new_pos][j][1] *= 2
                        score += game_area[new_pos][j][1]
                        for r in range(y):
                            for c in range(x):
                                if tiles_lst[r][c][0] == game_area[cur_pos][j][0]:
                                    tiles_lst[r][c][2] = False
                                    break
                        game_area[cur_pos][j] = [None, 2]
                        changes = True
                    elif game_area[new_pos][j][1] != game_area[cur_pos][j][1]:
                        if game_area[i+1][j][0] != None:
                            continue
                        new_pos -= 1
                        game_area[new_pos][j] = game_area[cur_pos][j]
                        game_area[cur_pos][j] = [None, 2]
                        changes = True

        if direction == 'up':
            for j in range(x):
                for i in range(y):
                    if game_area[i][j][0] == None or i == 0:
                        continue
                    cur_pos, new_pos = i, i-1
                    while new_pos != y and game_area[new_pos][j][0] == None:
                        new_pos -= 1
                    if new_pos == -1:
                        new_pos += 1
                        game_area[new_pos][j] = game_area[cur_pos][j]
                        game_area[cur_pos][j] = [None, 2]
                        changes = True
                    elif game_area[new_pos][j][1] == game_area[cur_pos][j][1]:
                        game_area[new_pos][j][1] *= 2
                        score += game_area[new_pos][j][1]
                        for r in range(y):
                            for c in range(x):
                                if tiles_lst[r][c][0] == game_area[cur_pos][j][0]:
                                    tiles_lst[r][c][2] = False
                                    break
                        game_area[cur_pos][j] = [None, 2]
                        changes = True
                    elif game_area[new_pos][j][1] != game_area[cur_pos][j][1]:
                        if game_area[i-1][j][0] != None:
                            continue
                        new_pos += 1
                        game_area[new_pos][j] = game_area[cur_pos][j]
                        game_area[cur_pos][j] = [None, 2]
                        changes = True

    def addtile(self, tiles_lst: list[list], game_area: list[list]):
        for i in range(y):
            for j in range(x):
                if not tiles_lst[i][j][2]:
                    r, c = random.randint(0, y-1), random.randint(0, x-1)
                    while game_area[r][c][0] != None:
                        r, c = random.randint(0, y-1), random.randint(0, x-1)
                    if random.randint(1, 10) == 1:
                        tiles_lst[i][j][3], game_area[r][c][1] = 4, 4
                    else:
                        tiles_lst[i][j][3], game_area[r][c][1] = 2, 2
                    game_area[r][c][0] = tiles_lst[i][j][0]
                    tiles_lst[i][j][1][0] = r
                    tiles_lst[i][j][1][1] = c
                    tiles_lst[i][j][2] = True
                    tiles_lst[i][j][0].setVisible(True)
                    return

    def new_game(self, xsize, ysize):
        global x
        global y
        global score
        x = xsize
        y = ysize
        score = 0
        
        self.setStyleSheet("background-color: %s" % self.text_color2)
        
        self.isMovingAble = True

        self.game_area_pos = list()
        for i in range(y):
            self.game_area_pos.append([])
            for j in range(x):
                self.game_area_pos[i].append([])
        
        self.game_area = list()
        for i in range(y):
            self.game_area.append([])
            for j in range(x):
                self.game_area[i].append([None, 2])        
        
        self.color_dict = {2: self.tile_color2,
                           4: self.tile_color4,
                           8: self.tile_color8,
                           16: self.tile_color16,
                           32: self.tile_color32,
                           64: self.tile_color64,
                           128: self.tile_color128,
                           256: self.tile_color256,
                           512: self.tile_color512,
                           1024: self.tile_color1024,
                           2048: self.tile_color2048
                           }
        
        self.tileposy = round(self.desk_h - 162.5 * y) // 2
        for i in range(y):
            self.tileposx = round(self.desk_w - 162.5 * x) // 2
            self.tileposy += 10
            if y == 6:
                self.tileposy += 1
            if i > 0:
                self.tileposy += self.tilesize
            for j in range(x):
                self.tileposx += 10
                if x == 6:
                    self.tileposx += 1
                if j > 0:
                    self.tileposx += self.tilesize                
                self.game_area_pos[i][j].append(self.tileposx)
                self.game_area_pos[i][j].append(self.tileposy)

        self.bg_plain = QWidget(self)
        self.bg_plain.setStyleSheet("background-color: %s; border-radius: 10px" % self.pad_color)
        self.bg_plain.setGeometry(round(self.desk_w - 162.5 * x) // 2, round(self.desk_h - 162.5 * y) // 2, round(162.5 * x), round(162.5 * y))

        self.score_plain = QLabel(self)
        self.score_plain.setGeometry((self.desk_w - 650) // 2 + 300, round(self.desk_h - 162.5 * y) // 2 - 100, 150, 75)
        self.score_plain.setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (self.tile_color2, self.text_color1))
        self.score_plain.setFont(self.score_plain_font)
        self.score_plain.setAlignment(Qt.AlignHCenter)
        self.score_plain.setText("счёт")

        self.score_value = QLabel(self)
        self.score_value.setGeometry((self.desk_w - 650) // 2 + 300, round(self.desk_h - 162.5 * y) // 2 - 67, 150, 30)
        self.score_value.setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (self.tile_color2, self.text_color2))
        self.score_value.setFont(self.score_plain_font)
        self.score_value.setAlignment(Qt.AlignHCenter)
        self.score_value.setText("0")

        self.best_plain = QLabel(self)
        self.best_plain.setGeometry((self.desk_w - 650) // 2 + 490, round(self.desk_h - 162.5 * y) // 2 - 100, 150, 75)
        self.best_plain.setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (self.tile_color2, self.text_color1))
        self.best_plain.setFont(self.score_plain_font)
        self.best_plain.setAlignment(Qt.AlignHCenter)
        self.best_plain.setText("лучший")

        self.best_value = QLabel(self)
        self.best_value.setGeometry((self.desk_w - 650) // 2 + 490, round(self.desk_h - 162.5 * y) // 2 - 67, 150, 30)
        self.best_value.setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (self.tile_color2, self.text_color2))
        self.best_value.setFont(self.score_plain_font)
        self.best_value.setAlignment(Qt.AlignHCenter)
        self.best_value.setText("0")

        self.icon = QLabel(self)
        self.icon.setText("2048")
        self.icon.setGeometry((self.desk_w - 650) // 2 + 8, round(self.desk_h - 162.5 * y) // 2 - 112, 255, 90)
        self.icon.setFont(self.icon_font)
        self.icon.setStyleSheet("color: %s" % self.text_color1)

        self.tiles_lst = list()
        self.hollows_lst = list()
        
        for i in range(y):
            self.hollows_lst.append([])
            for j in range(x):
                globals()['hollow' + str(i*(j+1) + j+1)] = QWidget(self)
                self.hollows_lst[i].append([globals()['hollow' + str(i*(j+1) + j+1)]])

        for i in range(y):
            self.tiles_lst.append([])
            for j in range(x):
                globals()['tile' + str(i*(j+1) + j+1)] = QLabel(self)
                self.tiles_lst[i].append([globals()['tile' + str(i*(j+1) + j+1)], [0, 0], False, 2])

        for _ in range(2):
            self.addtile(self.tiles_lst, self.game_area)

        for i in range(y):
            for j in range(x):
                if self.tiles_lst[i][j][2]:
                    size = self.tilesize
                else:
                    size = 0
                if self.tiles_lst[i][j][3] < 8:
                    text_color = self.text_color1
                else:
                    text_color = self.text_color2
                self.tiles_lst[i][j][0].setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (self.color_dict[self.tiles_lst[i][j][3]], text_color))
                self.tiles_lst[i][j][0].setGeometry(self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][0], self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][1], size, size)
                self.hollows_lst[i][j][0].setStyleSheet("background-color: %s; border-radius: 10px" % self.hollow_color)
                self.hollows_lst[i][j][0].setGeometry(self.game_area_pos[i][j][0], self.game_area_pos[i][j][1], self.tilesize, self.tilesize)
                self.tiles_lst[i][j][0].setText(str(self.tiles_lst[i][j][3]))
                self.tiles_lst[i][j][0].setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
                self.tiles_lst[i][j][0].setFont(self.tile_font)
                self.tiles_lst[i][j][0].setVisible(self.tiles_lst[i][j][2])

    def enable_moving(self):
        self.isMovingAble = True
        self.action_timer.stop()

    def enable_menu_moving(self):
        self.menu_btn.setEnabled(True)
        self.menu_timer.stop()

    def keyPressEvent(self, e):
        global changes
        global score
        global x
        global y
        changes = False
        if self.isMovingAble and not self.menu_pad.x() == 0:
            self.pos_anim = QParallelAnimationGroup()
            self.size_anim = QParallelAnimationGroup()
            #self.color_anim = QParallelAnimationGroup()
            if e.key() == Qt.Key_Q or e.key() == 1049:
                self.close()
            elif e.key() == Qt.Key_D or e.key() == Qt.Key_Right or e.key() == 1042:
                self.move_tiles(self.game_area, self.tiles_lst, 'right')
            elif e.key() == Qt.Key_A or e.key() == Qt.Key_Left or e.key() == 1060:
                self.move_tiles(self.game_area, self.tiles_lst, 'left')
            elif e.key() == Qt.Key_W or e.key() == Qt.Key_Up or e.key() == 1062:
                self.move_tiles(self.game_area, self.tiles_lst, 'up')
            elif e.key() == Qt.Key_S or e.key() == Qt.Key_Down or e.key() == 1067:
                self.move_tiles(self.game_area, self.tiles_lst, 'down')
            elif e.key() == Qt.Key_R:
                for i in range(y):
                    for j in range(x):
                        self.tiles_lst[i][j][0].deleteLater()
                        self.hollows_lst[i][j][0].deleteLater()
                self.bg_plain.deleteLater()
                self.best_plain.deleteLater()
                self.score_plain.deleteLater()
                self.icon.deleteLater()
                self.score_value.deleteLater()
                self.best_value.deleteLater()
                self.new_game(x, y)
                for i in range(y):
                    for j in range(x):
                        self.tiles_lst[i][j][0].show()
                        self.hollows_lst[i][j][0].show()
                self.bg_plain.show()
                self.best_plain.show()
                self.score_plain.show()
                self.icon.show()
                self.score_value.show()
                self.best_value.show()
        if changes:
            self.addtile(self.tiles_lst, self.game_area)
            for i in range(y):
                for j in range(x):
                    for r in range(y):
                        for c in range(x):
                            if self.game_area[r][c][0] == self.tiles_lst[i][j][0]:
                                self.tiles_lst[i][j][3] = self.game_area[r][c][1]
                                self.tiles_lst[i][j][1][0] = r
                                self.tiles_lst[i][j][1][1] = c
                    if self.tiles_lst[i][j][3] < 8:
                        text_color = self.text_color1
                    else:
                        text_color = self.text_color2
                    self.tiles_lst[i][j][0].setText(str(self.tiles_lst[i][j][3]))
                    self.tiles_lst[i][j][0].setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (self.color_dict[self.tiles_lst[i][j][3]], text_color))
                    if not self.tiles_lst[i][j][2]:
                        if self.tiles_lst[i][j][0].isVisible():
                            self.tiles_lst[i][j][0].setVisible(False)
                    if self.tiles_lst[i][j][2]:
                        anim = QPropertyAnimation(self.tiles_lst[i][j][0], b"pos")
                        anim.setEasingCurve(QEasingCurve.OutCubic)
                        if self.tiles_lst[i][j][0].isVisible():
                            anim.setDuration(250)
                        else:
                            self.tiles_lst[i][j][0].setVisible(True)
                            anim.setDuration(0)
                        anim.setEndValue(QPoint(self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][0], self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][1]))
                        self.pos_anim.addAnimation(anim)
                        if self.tiles_lst[i][j][0].size() == QSize(0, 0):
                            anim = QPropertyAnimation(self.tiles_lst[i][j][0], b"geometry")
                            anim.setEasingCurve(QEasingCurve.OutCubic)
                            anim.setDuration(250)
                            anim.setStartValue(QRect(self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][0] + 70, self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][1] + 70, 0, 0))
                            anim.setEndValue(QRect(self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][0], self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][1], self.tilesize, self.tilesize))
                            self.size_anim.addAnimation(anim)

            self.pos_anim.start()
            self.size_anim.start()
            self.score_value.setText(str(score))
            self.isMovingAble = False
            self.action_timer.start()

app = QApplication(sys.argv)
main_window = MainWindow()
main_window.showMaximized()
sys.exit(app.exec_())