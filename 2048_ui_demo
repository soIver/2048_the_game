from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QColor
import sys
import random

def move_tiles(game_area: list[list], direction: str):
    if direction == 'left':
        for i in range(4):
            for j in range(4):
                if game_area[i][j] == None or j == 0 or game_area[i][j-1] != None:
                    continue
                cur_pos, new_pos = j, j-1
                while new_pos != -1 and game_area[i][new_pos] == None:
                    new_pos -= 1
                new_pos += 1
                game_area[i][new_pos] = game_area[i][cur_pos]
                game_area[i][cur_pos] = None

    if direction == 'right':
        for i in range(4):
            for j in range(3, -1, -1):
                if game_area[i][j] == None or j == 3 or game_area[i][j+1] != None:
                    continue
                cur_pos, new_pos = j, j+1
                while new_pos != 4 and game_area[i][new_pos] == None:
                    new_pos += 1
                new_pos -= 1
                game_area[i][new_pos] = game_area[i][cur_pos]
                game_area[i][cur_pos] = None

    if direction == 'down':
        for j in range(4):
            for i in range(3, -1, -1):
                if game_area[i][j] == None or i == 3 or game_area[i+1][j] != None:
                    continue
                cur_pos, new_pos = i, i+1
                while new_pos != 4 and game_area[new_pos][j] == None:
                    new_pos += 1
                new_pos -= 1
                game_area[new_pos][j] = game_area[cur_pos][j]
                game_area[cur_pos][j] = None

    if direction == 'up':
        for j in range(4):
            for i in range(4):
                if game_area[i][j] == None or i == 0 or game_area[i-1][j] != None:
                    continue
                cur_pos, new_pos = i, i-1
                while new_pos != -1 and game_area[new_pos][j] == None:
                    new_pos -= 1
                new_pos += 1
                game_area[new_pos][j] = game_area[cur_pos][j]
                game_area[cur_pos][j] = None

def addtile(tiles_lst: list[list], game_area: list[list]):
    for i in range(4):
        for j in range(4):
            if not tiles_lst[i][j][2]:
                r, c = random.randint(0, 3), random.randint(0, 3)
                while game_area[r][c] != None:
                    r, c = random.randint(0, 3), random.randint(0, 3)
                if random.randint(1, 10) == 1:
                    tiles_lst[i][j][3] = 4
                else:
                    tiles_lst[i][j][3] = 2
                game_area[r][c] = tiles_lst[i][j][0]
                tiles_lst[i][j][1][0] = r
                tiles_lst[i][j][1][1] = c
                tiles_lst[i][j][2] = True
                return

score = 0
merge_cnt = 0

class MainWindow(QWidget):
    def __init__(self):
        tile_color2 = QColor(238,228,218).name()
        tile_color4 = QColor(238,225,201).name()
        tile_color8 = QColor(243,178,122).name()
        tile_color16 = QColor(243,178,122).name()
        tile_color32 = QColor(243,178,122).name()
        tile_color64 = QColor(243,178,122).name()
        tile_color128 = QColor(243,178,122).name()
        tile_color256 = QColor(243,178,122).name()
        tile_color512 = QColor(243,178,122).name()
        tile_color1024 = QColor(243,178,122).name()
        tile_color2048 = QColor(243,178,122).name()
        bg_plain_color = QColor(187,173,160).name()
        text_color = QColor(119,110,101).name()
        text_color2 = QColor(249,246,242).name()
        bg_color = QColor(250,248,239).name()
        hollow_color = QColor(205,193,180).name()
        super().__init__()
        self.setStyleSheet("background-color: %s" % bg_color)
        self.opacity = QGraphicsOpacityEffect(self)
        self.opacity.setOpacity(1.0)
        self.tilesize = 150
        self.matrix = QLabel(self)
        self.score_table = QLabel(self)
        self.score_font = self.score_table.font()
        self.score_font.setPointSize(30)
        self.score_table.setFont(self.score_font)
        self.game_area_pos = [[[], [], [], []],
                              [[], [], [], []],
                              [[], [], [], []],
                              [[], [], [], []]]
        
        self.game_area = [[None, None, None, None],
                          [None, None, None, None],
                          [None, None, None, None],
                          [None, None, None, None]]
        
        self.tileposy = 275
        for i in range(4):
            self.tileposx = 635
            self.tileposy += 10
            if i > 0:
                self.tileposy += self.tilesize
            for j in range(4):
                self.tileposx += 10
                if j > 0:
                    self.tileposx += self.tilesize                
                self.game_area_pos[i][j].append(self.tileposx)
                self.game_area_pos[i][j].append(self.tileposy)

        self.score_table.setGeometry(810, 150, 300, 150)
        self.score_table.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
        self.score_table.setStyleSheet("background-color: %s; border-radius: 10px" % bg_plain_color)
        self.score_table.setText("cчёт: 0")

        self.bg_plain = QWidget(self)
        self.bg_plain.setStyleSheet("background-color: %s; border-radius: 10px" % bg_plain_color)
        self.bg_plain.setGeometry(635, 275, 650, 650)

        hollow1, hollow2, hollow3, hollow4 = QWidget(self), QWidget(self), QWidget(self), QWidget(self)
        hollow5, hollow6, hollow7, hollow8 = QWidget(self), QWidget(self), QWidget(self), QWidget(self)      
        hollow9, hollow10, hollow11, hollow12 = QWidget(self), QWidget(self), QWidget(self), QWidget(self)
        hollow13, hollow14, hollow15, hollow16 = QWidget(self), QWidget(self), QWidget(self), QWidget(self)

        tile1, tile2, tile3, tile4 = QWidget(self), QWidget(self), QWidget(self), QWidget(self)
        tile5, tile6, tile7, tile8 = QWidget(self), QWidget(self), QWidget(self), QWidget(self)      
        tile9, tile10, tile11, tile12 = QWidget(self), QWidget(self), QWidget(self), QWidget(self)
        tile13, tile14, tile15, tile16 = QWidget(self), QWidget(self), QWidget(self), QWidget(self)

        self.tiles_lst = [[[tile1, [0, 0], False, 0], [tile2, [0, 0], False, 0], [tile3, [0, 0], False, 0], [tile4, [0, 0], False, 0]], 
                           [[tile5, [0, 0], False, 0], [tile6, [0, 0], False, 0], [tile7, [0, 0], False, 0], [tile8, [0, 0], False, 0]],
                           [[tile9, [0, 0], False, 0], [tile10, [0, 0], False, 0], [tile11, [0, 0], False, 0], [tile12, [0, 0], False, 0]],
                           [[tile13, [0, 0], False, 0], [tile14, [0, 0], False, 0], [tile15, [0, 0], False, 0], [tile16, [0, 0], False, 0]]]
        
        self.hollows_lst = [[hollow1, hollow2, hollow3, hollow4], 
                           [hollow5, hollow6, hollow7, hollow8],
                           [hollow9, hollow10, hollow11, hollow12],
                           [hollow13, hollow14, hollow15, hollow16]]
        
        for _ in range(2):
            addtile(self.tiles_lst, self.game_area)

        for i in range(4):
            for j in range(4):
                self.tiles_lst[i][j][0].setStyleSheet("background-color: %s; border-radius: 10px" % tile_color2)
                self.tiles_lst[i][j][0].setGeometry(self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][0], self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][1], self.tilesize, self.tilesize)
                self.hollows_lst[i][j].setStyleSheet("background-color: %s; border-radius: 10px" % hollow_color)
                self.hollows_lst[i][j].setGeometry(self.game_area_pos[i][j][0], self.game_area_pos[i][j][1], self.tilesize, self.tilesize)
                self.tiles_lst[i][j][0].setVisible(self.tiles_lst[i][j][2])
                
        self.setWindowTitle("2048")
        self.setMinimumSize(960, 600)
        self.showMaximized()
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.show()

    def keyPressEvent(self, e):
        global score
        self.pos_anim = QParallelAnimationGroup()

        if e.key() == Qt.Key_Q:
            self.close()
        
        if e.key() == Qt.Key_D:
            move_tiles(self.game_area, 'right')

        if e.key() == Qt.Key_A:
            move_tiles(self.game_area, 'left')

        if e.key() == Qt.Key_W:
            move_tiles(self.game_area, 'up')

        if e.key() == Qt.Key_S:
            move_tiles(self.game_area, 'down')
        addtile(self.tiles_lst, self.game_area)
        for i in range(4):
            for j in range(4):
                for r in range(4):
                    for c in range(4):
                        if self.game_area[r][c] == self.tiles_lst[i][j][0]:
                            self.tiles_lst[i][j][1][0] = r
                            self.tiles_lst[i][j][1][1] = c
                anim = QPropertyAnimation(self.tiles_lst[i][j][0], b"pos")
                anim.setEasingCurve(QEasingCurve.OutCubic)
                if self.tiles_lst[i][j][0].isVisible():
                    anim.setDuration(300)
                else:
                    anim.setDuration(0)
                anim.setEndValue(QPoint(self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][0], self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][1]))
                self.pos_anim.addAnimation(anim)

        self.pos_anim.start()
        
        self.score_table.setText("cчёт: " + str(score))
        for i in range(4):
            for j in range(4):
                if not self.tiles_lst[i][j][0].isVisible() and self.tiles_lst[i][j][2]:
                    self.tiles_lst[i][j][0].setVisible(True)

app = QApplication(sys.argv)
window_game = MainWindow()
sys.exit(app.exec_())
