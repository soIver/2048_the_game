from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QColor
import sys
import random

y = 4
x = 4
score = 0
best = 0
merge_cnt = 0
changes = False

def move_tiles(game_area: list[list], tiles_lst: list[list], direction: str):
    global changes
    changes = False
    if direction == 'left':
        for i in range(y):
            for j in range(x):
                if game_area[i][j][0] == None or j == 0:
                    continue
                cur_pos, new_pos = j, j-1
                while new_pos != -1 and game_area[i][new_pos][0] == None:
                    new_pos -= 1
                if new_pos == -1:
                    new_pos += 1
                    game_area[i][new_pos] = game_area[i][cur_pos]
                    game_area[i][cur_pos] = [None, 2]
                    changes = True
                elif game_area[i][new_pos][1] == game_area[i][cur_pos][1]:
                    game_area[i][new_pos][1] *= 2
                    for r in range(4):
                        for c in range(4):
                            if tiles_lst[r][c][0] == game_area[i][cur_pos][0]:
                                tiles_lst[r][c][2] = False
                                break
                    game_area[i][cur_pos] = [None, 2]
                    changes = True
                elif game_area[i][new_pos][1] != game_area[i][cur_pos][1]:
                    if game_area[i][j-1][0] != None:
                        continue
                    new_pos += 1
                    game_area[i][new_pos] = game_area[i][cur_pos]
                    game_area[i][cur_pos] = [None, 2]
                    changes = True


    if direction == 'right':
        for i in range(y):
            for j in range(x - 1, -1, -1):
                if game_area[i][j][0] == None or j == x - 1:
                    continue
                cur_pos, new_pos = j, j+1
                while new_pos != x and game_area[i][new_pos][0] == None:
                    new_pos += 1
                if new_pos == 4:
                    new_pos -= 1
                    game_area[i][new_pos] = game_area[i][cur_pos]
                    game_area[i][cur_pos] = [None, 2]
                    changes = True
                elif game_area[i][new_pos][1] == game_area[i][cur_pos][1]:
                    game_area[i][new_pos][1] *= 2
                    for r in range(4):
                        for c in range(4):
                            if tiles_lst[r][c][0] == game_area[i][cur_pos][0]:
                                tiles_lst[r][c][2] = False
                                break
                    game_area[i][cur_pos] = [None, 2]
                    changes = True
                elif game_area[i][new_pos][1] != game_area[i][cur_pos][1]:
                    if game_area[i][j+1][0] != None:
                        continue
                    new_pos -= 1
                    game_area[i][new_pos] = game_area[i][cur_pos]
                    game_area[i][cur_pos] = [None, 2]
                    changes = True

    if direction == 'down':
        for j in range(x):
            for i in range(y - 1, -1, -1):
                if game_area[i][j][0] == None or i == y - 1:
                    continue
                cur_pos, new_pos = i, i+1
                while new_pos != y and game_area[new_pos][j][0] == None:
                    new_pos += 1
                if new_pos == 4:
                    new_pos -= 1
                    game_area[new_pos][j] = game_area[cur_pos][j]
                    game_area[cur_pos][j] = [None, 2]
                    changes = True
                elif game_area[new_pos][j][1] == game_area[cur_pos][j][1]:
                    game_area[new_pos][j][1] *= 2
                    for r in range(4):
                        for c in range(4):
                            if tiles_lst[r][c][0] == game_area[cur_pos][j][0]:
                                tiles_lst[r][c][2] = False
                                break
                    game_area[cur_pos][j] = [None, 2]
                    changes = True
                elif game_area[new_pos][j][1] != game_area[cur_pos][j][1]:
                    if game_area[i+1][j][0] != None:
                        continue
                    new_pos -= 1
                    game_area[new_pos][j] = game_area[cur_pos][j]
                    game_area[cur_pos][j] = [None, 2]
                    changes = True

    if direction == 'up':
        for j in range(x):
            for i in range(y):
                if game_area[i][j][0] == None or i == 0:
                    continue
                cur_pos, new_pos = i, i-1
                while new_pos != y and game_area[new_pos][j][0] == None:
                    new_pos -= 1
                if new_pos == -1:
                    new_pos += 1
                    game_area[new_pos][j] = game_area[cur_pos][j]
                    game_area[cur_pos][j] = [None, 2]
                    changes = True
                elif game_area[new_pos][j][1] == game_area[cur_pos][j][1]:
                    game_area[new_pos][j][1] *= 2
                    for r in range(4):
                        for c in range(4):
                            if tiles_lst[r][c][0] == game_area[cur_pos][j][0]:
                                tiles_lst[r][c][2] = False
                                break
                    game_area[cur_pos][j] = [None, 2]
                    changes = True
                elif game_area[new_pos][j][1] != game_area[cur_pos][j][1]:
                    if game_area[i-1][j][0] != None:
                        continue
                    new_pos += 1
                    game_area[new_pos][j] = game_area[cur_pos][j]
                    game_area[cur_pos][j] = [None, 2]
                    changes = True

def addtile(tiles_lst: list[list], game_area: list[list]):
    for i in range(y):
        for j in range(x):
            if not tiles_lst[i][j][2]:
                r, c = random.randint(0, y-1), random.randint(0, x-1)
                while game_area[r][c][0] != None:
                    r, c = random.randint(0, y-1), random.randint(0, x-1)
                if random.randint(1, 10) == 1:
                    tiles_lst[i][j][3], game_area[r][c][1] = 4, 4
                else:
                    tiles_lst[i][j][3], game_area[r][c][1] = 2, 2
                game_area[r][c][0] = tiles_lst[i][j][0]
                tiles_lst[i][j][1][0] = r
                tiles_lst[i][j][1][1] = c
                tiles_lst[i][j][2] = True
                return

class MainWindow(QWidget):
    def __init__(self):
        tile_color2 = QColor(238, 228, 218).name()
        tile_color4 = QColor(238, 225, 201).name()
        tile_color8 = QColor(243, 178, 122).name()
        tile_color16 = QColor(246, 150, 100).name()
        tile_color32 = QColor(247, 124, 95).name()
        tile_color64 = QColor(247, 95, 59).name()
        tile_color128 = QColor(248, 214, 105).name()
        tile_color256 = QColor(248, 223, 90).name()
        tile_color512 = QColor(255, 224, 62).name()
        tile_color1024 = QColor(255, 218, 24).name()
        tile_color2048 = QColor(255, 214, 0).name()
        bg_plain_color = QColor(187,173,160).name()
        self.text_color1 = QColor(119,110,101).name()
        self.text_color2 = QColor(249,246,242).name()
        bg_color = QColor(250,248,239).name()
        hollow_color = QColor(205,193,180).name()

        desk_w = QApplication.desktop().width()
        desk_h = QApplication.desktop().height()

        super().__init__()
        self.setStyleSheet("background-color: %s" % bg_color)
        self.opacity = QGraphicsOpacityEffect(self)
        self.opacity.setOpacity(1.0)
        self.tilesize = desk_h // 8
        self.fonts_parent = QLabel(self)

        self.score_plain_font = self.fonts_parent.font()
        self.score_plain_font.setPointSize(14)
        
        self.tile_font = self.fonts_parent.font()
        self.tile_font.setPointSize(40)
        self.tile_font.setBold(True)

        self.icon_font = self.fonts_parent.font()
        self.icon_font.setPointSize(desk_h // 24)
        self.icon_font.setBold(True)

        self.game_area_pos = list()
        for i in range(y):
            self.game_area_pos.append([])
            for j in range(x):
                self.game_area_pos[i].append([])
        
        self.game_area = list()
        for i in range(y):
            self.game_area.append([])
            for j in range(x):
                self.game_area[i].append([None, 2])        
        
        self.color_dict = {2: tile_color2,
                           4: tile_color4,
                           8: tile_color8,
                           16: tile_color16,
                           32: tile_color32,
                           64: tile_color64,
                           128: tile_color128,
                           256: tile_color256,
                           512: tile_color512,
                           1024: tile_color1024,
                           2048: tile_color2048
                           }
        
        self.tileposy = round(desk_h / 2 - desk_h / 16 * y)
        for i in range(y):
            self.tileposx = round(desk_w  / 2 - desk_w / 24 * x)
            self.tileposy += 9 + round(y / 4)
            if i > 0:
                self.tileposy += self.tilesize
            for j in range(x):
                self.tileposx += 9 + round(x / 4)
                if j > 0:
                    self.tileposx += self.tilesize                
                self.game_area_pos[i][j].append(self.tileposx)
                self.game_area_pos[i][j].append(self.tileposy)

        self.bg_plain = QWidget(self)
        self.bg_plain.setStyleSheet("background-color: %s; border-radius: 10px" % bg_plain_color)
        self.bg_plain.setGeometry(round(desk_w  / 2 - desk_w / 24 * x), round(desk_h / 2 - desk_h / 16 * y), round(desk_h / 7.4 * x), round(desk_h / 7.4 * y))

        self.score_plain = QLabel(self)
        self.score_plain.setGeometry(round(desk_w / 2 - desk_w / 85), round(desk_h / 2 - desk_h / 16 * y) - 105, 150, 75)
        self.score_plain.setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (tile_color2, self.text_color1))
        self.score_plain.setFont(self.score_plain_font)
        self.score_plain.setAlignment(Qt.AlignHCenter)
        self.score_plain.setText("счёт")

        self.best_plain = QLabel(self)
        self.best_plain.setGeometry(round(desk_w / 3 + desk_w / 3.9), desk_h // 2 - round(desk_h / 16 * y) - 105, 150, 75)
        self.best_plain.setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (tile_color2, self.text_color1))
        self.best_plain.setFont(self.score_plain_font)
        self.best_plain.setAlignment(Qt.AlignHCenter)
        self.best_plain.setText("лучший")

        self.icon = QLabel(self)
        self.icon.setText("2048")
        self.icon.setGeometry(desk_w // 3, desk_h // 2 - round(desk_h / 16 * y) - 118, 270, 90)
        self.icon.setFont(self.icon_font)
        self.icon.setStyleSheet("color: %s" % self.text_color1)

        self.tiles_lst = list()
        self.hollows_lst = list()
        
        for i in range(y):
            self.hollows_lst.append([])
            for j in range(x):
                globals()['hollow' + str(i*(j+1) + j+1)] = QWidget(self)
                self.hollows_lst[i].append(globals()['hollow' + str(i*(j+1) + j+1)])

        for i in range(y):
            self.tiles_lst.append([])
            for j in range(x):
                globals()['tile' + str(i*(j+1) + j+1)] = QLabel(self)
                self.tiles_lst[i].append([globals()['tile' + str(i*(j+1) + j+1)], [0, 0], False, 2])

        for _ in range(2):
            addtile(self.tiles_lst, self.game_area)

        for i in range(y):
            for j in range(x):
                if self.tiles_lst[i][j][2]:
                    size = self.tilesize
                else:
                    size = 0
                if self.tiles_lst[i][j][3] < 8:
                    text_color = self.text_color1
                else:
                    text_color = self.text_color2
                self.tiles_lst[i][j][0].setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (self.color_dict[self.tiles_lst[i][j][3]], text_color))
                self.tiles_lst[i][j][0].setGeometry(self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][0], self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][1], size, size)
                self.hollows_lst[i][j].setStyleSheet("background-color: %s; border-radius: 10px" % hollow_color)
                self.hollows_lst[i][j].setGeometry(self.game_area_pos[i][j][0], self.game_area_pos[i][j][1], self.tilesize, self.tilesize)
                self.tiles_lst[i][j][0].setText(str(self.tiles_lst[i][j][3]))
                self.tiles_lst[i][j][0].setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
                self.tiles_lst[i][j][0].setFont(self.tile_font)
                self.tiles_lst[i][j][0].setVisible(self.tiles_lst[i][j][2])
                
        self.setWindowTitle("2048")
        self.setWindowFlag(Qt.FramelessWindowHint)
        
    def keyPressEvent(self, e):
        self.pos_anim = QParallelAnimationGroup()
        self.size_anim = QParallelAnimationGroup()
        #self.color_anim = QParallelAnimationGroup()
        if e.key() == Qt.Key_Q or e.key() == 1049:
            self.close()
        elif e.key() == Qt.Key_D or e.key() == Qt.Key_Right or e.key() == 1042:
            move_tiles(self.game_area, self.tiles_lst, 'right')
        elif e.key() == Qt.Key_A or e.key() == Qt.Key_Left or e.key() == 1060:
            move_tiles(self.game_area, self.tiles_lst, 'left')
        elif e.key() == Qt.Key_W or e.key() == Qt.Key_Up or e.key() == 1062:
            move_tiles(self.game_area, self.tiles_lst, 'up')
        elif e.key() == Qt.Key_S or e.key() == Qt.Key_Down or e.key() == 1067:
            move_tiles(self.game_area, self.tiles_lst, 'down')

        if changes:
            addtile(self.tiles_lst, self.game_area)

            for i in range(y):
                for j in range(x):
                    for r in range(y):
                        for c in range(x):
                            if self.game_area[r][c][0] == self.tiles_lst[i][j][0]:
                                self.tiles_lst[i][j][3] = self.game_area[r][c][1]
                                self.tiles_lst[i][j][1][0] = r
                                self.tiles_lst[i][j][1][1] = c
                    if self.tiles_lst[i][j][3] < 8:
                        text_color = self.text_color1
                    else:
                        text_color = self.text_color2
                    self.tiles_lst[i][j][0].setText(str(self.tiles_lst[i][j][3]))
                    self.tiles_lst[i][j][0].setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (self.color_dict[self.tiles_lst[i][j][3]], text_color))
                    if not self.tiles_lst[i][j][2]:
                        self.tiles_lst[i][j][0].setVisible(False)
                    else:
                        anim = QPropertyAnimation(self.tiles_lst[i][j][0], b"pos")
                        anim.setEasingCurve(QEasingCurve.OutCubic)
                        if self.tiles_lst[i][j][0].isVisible():
                            anim.setDuration(300)
                        else:
                            self.tiles_lst[i][j][0].setVisible(True)
                            anim.setDuration(0)
                        anim.setEndValue(QPoint(self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][0], self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][1]))
                        self.pos_anim.addAnimation(anim)
                        if self.tiles_lst[i][j][0].size() == QSize(0, 0):
                            anim = QPropertyAnimation(self.tiles_lst[i][j][0], b"geometry")
                            anim.setEasingCurve(QEasingCurve.OutCubic)
                            anim.setDuration(250)
                            anim.setStartValue(QRect(self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][0] + 70, self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][1] + 70, 0, 0))
                            anim.setEndValue(QRect(self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][0], self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][1], self.tilesize, self.tilesize))
                            self.size_anim.addAnimation(anim)

            self.pos_anim.start()
            self.size_anim.start()

app = QApplication(sys.argv)
window_game = MainWindow()
window_game.showMaximized()
sys.exit(app.exec_())