from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QColor
import sys
import random

y = 4
x = 4
score = 0
merge_cnt = 0

def move_tiles(game_area: list[list], direction: str):
    if direction == 'left':
        for i in range(y):
            for j in range(x):
                if game_area[i][j] == None or j == 0 or game_area[i][j-1] != None:
                    continue
                cur_pos, new_pos = j, j-1
                while new_pos != -1 and game_area[i][new_pos] == None:
                    new_pos -= 1
                new_pos += 1
                game_area[i][new_pos] = game_area[i][cur_pos]
                game_area[i][cur_pos] = None

    if direction == 'right':
        for i in range(y):
            for j in range(x - 1, -1, -1):
                if game_area[i][j] == None or j == x - 1 or game_area[i][j+1] != None:
                    continue
                cur_pos, new_pos = j, j+1
                while new_pos != x and game_area[i][new_pos] == None:
                    new_pos += 1
                new_pos -= 1
                game_area[i][new_pos] = game_area[i][cur_pos]
                game_area[i][cur_pos] = None

    if direction == 'down':
        for j in range(x):
            for i in range(y - 1, -1, -1):
                if game_area[i][j] == None or i == y - 1 or game_area[i+1][j] != None:
                    continue
                cur_pos, new_pos = i, i+1
                while new_pos != y and game_area[new_pos][j] == None:
                    new_pos += 1
                new_pos -= 1
                game_area[new_pos][j] = game_area[cur_pos][j]
                game_area[cur_pos][j] = None

    if direction == 'up':
        for j in range(x):
            for i in range(y):
                if game_area[i][j] == None or i == 0 or game_area[i-1][j] != None:
                    continue
                cur_pos, new_pos = i, i-1
                while new_pos != -1 and game_area[new_pos][j] == None:
                    new_pos -= 1
                new_pos += 1
                game_area[new_pos][j] = game_area[cur_pos][j]
                game_area[cur_pos][j] = None

def addtile(tiles_lst: list[list], game_area: list[list]):
    for i in range(y):
        for j in range(x):
            if not tiles_lst[i][j][2]:
                r, c = random.randint(0, y-1), random.randint(0, x-1)
                while game_area[r][c] != None:
                    r, c = random.randint(0, y-1), random.randint(0, x-1)
                if random.randint(1, 10) == 1:
                    tiles_lst[i][j][3] = 4
                else:
                    tiles_lst[i][j][3] = 2
                game_area[r][c] = tiles_lst[i][j][0]
                tiles_lst[i][j][1][0] = r
                tiles_lst[i][j][1][1] = c
                tiles_lst[i][j][2] = True
                return

class MainWindow(QWidget):
    def __init__(self):
        tile_color2 = QColor(238, 228, 218).name()
        tile_color4 = QColor(238, 225, 201).name()
        tile_color8 = QColor(243, 178, 122).name()
        tile_color16 = QColor(246, 150, 100).name()
        tile_color32 = QColor(247, 124, 95).name()
        tile_color64 = QColor(247, 95, 59).name()
        tile_color128 = QColor(248, 214, 105).name()
        tile_color256 = QColor(248, 223, 90).name()
        tile_color512 = QColor(255, 224, 62).name()
        tile_color1024 = QColor(255, 218, 24).name()
        tile_color2048 = QColor(255, 214, 0).name()
        bg_plain_color = QColor(187,173,160).name()
        text_color = QColor(119,110,101).name()
        text_color2 = QColor(249,246,242).name()
        bg_color = QColor(250,248,239).name()
        hollow_color = QColor(205,193,180).name()

        super().__init__()
        self.setStyleSheet("background-color: %s" % bg_color)
        self.opacity = QGraphicsOpacityEffect(self)
        self.opacity.setOpacity(1.0)
        self.tilesize = 150
        self.matrix = QLabel(self)
        self.score_table = QLabel(self)
        self.score_font = self.score_table.font()
        self.score_font.setPointSize(30)
        self.score_table.setFont(self.score_font)
        self.tile_font = self.score_table.font()
        self.tile_font.setPointSize(30)
        self.tile_font.setBold(True)

        self.game_area_pos = list()
        for i in range(y):
            self.game_area_pos.append([])
            for j in range(x):
                self.game_area_pos[i].append([])
        
        self.game_area = list()
        for i in range(y):
            self.game_area.append([])
            for j in range(x):
                self.game_area[i].append(None)        
        
        self.color_dict = {2: tile_color2,
                           4: tile_color4,
                           8: tile_color8,
                           16: tile_color16,
                           32: tile_color32,
                           64: tile_color64,
                           128: tile_color128,
                           256: tile_color256,
                           512: tile_color512,
                           1024: tile_color1024,
                           2048: tile_color2048
                           }
        
        self.tileposy = 275
        for i in range(y):
            self.tileposx = 635
            self.tileposy += 10
            if i > 0:
                self.tileposy += self.tilesize
            for j in range(x):
                self.tileposx += 10
                if j > 0:
                    self.tileposx += self.tilesize                
                self.game_area_pos[i][j].append(self.tileposx)
                self.game_area_pos[i][j].append(self.tileposy)

        self.score_table.setGeometry(810, 150, 300, 150)
        self.score_table.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
        self.score_table.setStyleSheet("background-color: %s; border-radius: 10px" % bg_plain_color)
        self.score_table.setText("cчёт: 0")

        self.bg_plain = QWidget(self)
        self.bg_plain.setStyleSheet("background-color: %s; border-radius: 10px" % bg_plain_color)
        self.bg_plain.setGeometry(635, 275, round(162.5 * x), round(162.5 * y))

        self.tiles_lst = list()
        self.hollows_lst = list()
        
        for i in range(y):
            self.hollows_lst.append([])
            for j in range(x):
                globals()['hollow' + str(i*(j+1) + j+1)] = QWidget(self)
                self.hollows_lst[i].append(globals()['hollow' + str(i*(j+1) + j+1)])

        for i in range(y):
            self.tiles_lst.append([])
            for j in range(x):
                globals()['tile' + str(i*(j+1) + j+1)] = QLabel(self)
                self.tiles_lst[i].append([globals()['tile' + str(i*(j+1) + j+1)], [0, 0], False, 2])

        for _ in range(2):
            addtile(self.tiles_lst, self.game_area)

        for i in range(y):
            for j in range(x):
                self.tiles_lst[i][j][0].setStyleSheet("background-color: %s; color: rgb(119,110,101); border-radius: 10px" % self.color_dict[self.tiles_lst[i][j][3]])
                self.tiles_lst[i][j][0].setGeometry(self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][0], self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][1], self.tilesize, self.tilesize)
                self.hollows_lst[i][j].setStyleSheet("background-color: %s; border-radius: 10px" % hollow_color)
                self.hollows_lst[i][j].setGeometry(self.game_area_pos[i][j][0], self.game_area_pos[i][j][1], self.tilesize, self.tilesize)
                self.tiles_lst[i][j][0].setText(str(self.tiles_lst[i][j][3]))
                self.tiles_lst[i][j][0].setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
                self.tiles_lst[i][j][0].setFont(self.tile_font)
                self.tiles_lst[i][j][0].setVisible(self.tiles_lst[i][j][2])
                
        self.setWindowTitle("2048")
        self.setMinimumSize(960, 600)
        self.showMaximized()
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.show()

    def keyPressEvent(self, e):
        global score
        self.pos_anim = QParallelAnimationGroup()

        if e.key() == Qt.Key_Q:
            self.close()
        
        if e.key() == Qt.Key_D:
            move_tiles(self.game_area, 'right')

        if e.key() == Qt.Key_A:
            move_tiles(self.game_area, 'left')

        if e.key() == Qt.Key_W:
            move_tiles(self.game_area, 'up')

        if e.key() == Qt.Key_S:
            move_tiles(self.game_area, 'down')

        addtile(self.tiles_lst, self.game_area)

        for i in range(y):
            for j in range(x):
                for r in range(y):
                    for c in range(x):
                        if self.game_area[r][c] == self.tiles_lst[i][j][0]:
                            self.tiles_lst[i][j][1][0] = r
                            self.tiles_lst[i][j][1][1] = c
                            self.tiles_lst[i][j][0].setText(str(self.tiles_lst[i][j][3]))
                            self.tiles_lst[i][j][0].setStyleSheet("background-color: %s; color: rgb(119,110,101); border-radius: 10px" % self.color_dict[self.tiles_lst[i][j][3]])
                if self.tiles_lst[i][j][2]:
                    anim = QPropertyAnimation(self.tiles_lst[i][j][0], b"pos")
                    anim.setEasingCurve(QEasingCurve.OutCubic)
                    if self.tiles_lst[i][j][0].isVisible():
                        anim.setDuration(300)
                    else:
                        self.tiles_lst[i][j][0].setVisible(True)
                        anim.setDuration(0)
                    anim.setEndValue(QPoint(self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][0], self.game_area_pos[self.tiles_lst[i][j][1][0]][self.tiles_lst[i][j][1][1]][1]))
                    self.pos_anim.addAnimation(anim)

        self.pos_anim.start()
        
        self.score_table.setText("cчёт: " + str(score))

app = QApplication(sys.argv)
window_game = MainWindow()
sys.exit(app.exec_())