from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
import sys
import random

y = 4
x = 4
winnomin = 2048
score = 0
best = 0
merge_cnt = 0
changes = False
curwin = 0
newwin = 1

class MainWindow(QMainWindow):
    global curwin
    global newwin
    def __init__(self):
        super().__init__()
        self.isWindowAnimEnd = True
        self.isMenuActive = False
        self.opacity1 = QGraphicsOpacityEffect()
        self.opacity1.setOpacity(0)
        self.opacity2 = QGraphicsOpacityEffect()
        self.opacity2.setOpacity(0)
        self.opacity3 = QGraphicsOpacityEffect()
        self.opacity3.setOpacity(0)
        self.opacity4 = QGraphicsOpacityEffect()
        self.opacity4.setOpacity(0)
        self.opacity5 = QGraphicsOpacityEffect()
        self.opacity5.setOpacity(0)
        self.tilesize = 150
        self.fonts_parent = QLabel(self)
        self.score_plain_font = self.fonts_parent.font()
        self.score_plain_font.setPointSize(14)
        self.tile_font = self.fonts_parent.font()
        self.tile_font.setPointSize(40)
        self.tile_font.setBold(True)
        self.icon_font = self.fonts_parent.font()
        self.icon_font.setPointSize(50)
        self.icon_font.setBold(True)
        self.desc_font = self.fonts_parent.font()
        self.desc_font.setPointSize(25)
        self.desc_font.setBold(True)
        self.desc_font_mini = self.fonts_parent.font()
        self.desc_font_mini.setPointSize(15)
        self.action_timer = QTimer()
        self.action_timer.setInterval(100)
        self.action_timer.timeout.connect(self.enable_moving)
        self.menu_timer = QTimer()
        self.menu_timer.setInterval(300)
        self.menu_timer.timeout.connect(self.enable_menu_moving)
        self.window_timer = QTimer()
        self.window_timer.setInterval(600)
        self.window_timer.timeout.connect(self.move_window)
        
        self.setWindowTitle('2048')
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.desk_w = QApplication.desktop().width()
        self.desk_h = QApplication.desktop().height()
        self.clr_change('classic')
        self.game_window_init(x, y)
        self.windows_init()

    def clr_change(self, clrtheme: str):
        match clrtheme:
            case 'classic':
                self.tile_color2 = '#eee4da'
                self.tile_color4 = '#eee1c9'
                self.tile_color8 = '#f3b27a'
                self.tile_color16 = '#f69664'
                self.tile_color32 = '#f77c5f'
                self.tile_color64 = '#f75f3b'
                self.tile_color128 = '#f8d669'
                self.tile_color256 = '#f8df5a'
                self.tile_color512 = '#ffe03e'
                self.tile_color1024 = '#ffda18'
                self.tile_color2048 = '#ffd600'
                self.pad_color = '#bbada0'
                self.text_color1 = '#776e65'
                self.text_color2 = '#f9f6f2'
                self.hollow_color = '#cdc1b4'
            case 'cold':
                self.tile_color2 = '#DAEEEA'
                self.tile_color4 = '#D1DDE4'
                self.tile_color8 = '#80DBED'
                self.tile_color16 = '#5AB3CB'
                self.tile_color32 = '#5696AB'
                self.tile_color64 = '#04597C'
                self.tile_color128 = '#52A499'
                self.tile_color256 = '#458D83'
                self.tile_color512 = '#48746E'
                self.tile_color1024 = '#4D6E69'
                self.tile_color2048 = '#38544A'
                self.pad_color = '#A0B3BB'
                self.text_color1 = '#657477'
                self.text_color2 = '#F2F7F9'
                self.hollow_color = '#BED1D6'
            case 'gray':
                self.tile_color2 = '#E2E2E2'
                self.tile_color4 = '#CECECE'
                self.tile_color8 = '#BEBEBE'
                self.tile_color16 = '#959595'
                self.tile_color32 = '#7B7B7B'
                self.tile_color64 = '#6E6E6E'
                self.tile_color128 = '#525252'
                self.tile_color256 = '#434343'
                self.tile_color512 = '#383838'
                self.tile_color1024 = '#323232'
                self.tile_color2048 = '#2D2D2D'
                self.pad_color = '#5B5B5B'
                self.text_color1 = '#464646'
                self.text_color2 = '#FAFAFA'
                self.hollow_color = '#676767'
        self.mode_img1_png = QPixmap(f'sprites\{clrtheme}\mode1.png')
        self.mode_img1_png.setMask(self.mode_img1_png.createHeuristicMask(Qt.transparent))
        self.mode_img2_png = QPixmap(f'sprites\{clrtheme}\mode2.png')
        self.mode_img2_png.setMask(self.mode_img2_png.createHeuristicMask(Qt.transparent))
        self.mode_img3_png = QPixmap(f'sprites\{clrtheme}\mode3.png')
        self.mode_img3_png.setMask(self.mode_img3_png.createHeuristicMask(Qt.transparent))
        self.mode_img4_png = QPixmap(f'sprites\{clrtheme}\mode4.png')
        self.mode_img4_png.setMask(self.mode_img4_png.createHeuristicMask(Qt.transparent))
        self.menu_btn_png = QPixmap(f'sprites\{clrtheme}\menu_btn.png')
        self.menu_btn_png = self.menu_btn_png.scaled(120, 120)
        self.menu_btn_png.setMask(self.menu_btn_png.createHeuristicMask(Qt.transparent))
        self.setStyleSheet("background-color: %s" % self.text_color2)

    def windows_init(self):
        self.mode_title = QLabel("выбор режима игры", self)
        self.mode_title.setFont(self.icon_font)
        self.mode_title.setAlignment(Qt.AlignBottom | Qt.AlignHCenter)
        self.mode_title.setStyleSheet('color: %s' % self.text_color1)
        self.mode_title.setGeometry(QRect(600, 50 - self.desk_h, 1200, 100))
        self.mode_pad1 = QWidget(self)
        self.mode_pad1.setStyleSheet('background-color: %s; border-radius: 10px' % self.pad_color)
        self.mode_pad1.setGeometry(QRect(610, 200 - self.desk_h, 580, 280))
        self.mode_pad2 = QWidget(self)
        self.mode_pad2.setStyleSheet('background-color: %s; border-radius: 10px' % self.pad_color)
        self.mode_pad2.setGeometry(QRect(1250, 200 - self.desk_h, 580, 280))
        self.mode_pad3 = QWidget(self)
        self.mode_pad3.setStyleSheet('background-color: %s; border-radius: 10px' % self.pad_color)
        self.mode_pad3.setGeometry(QRect(610, 625 - self.desk_h, 580, 280))
        self.mode_pad4 = QWidget(self)
        self.mode_pad4.setStyleSheet('background-color: %s; border-radius: 10px' % self.pad_color)
        self.mode_pad4.setGeometry(QRect(1250, 625 - self.desk_h, 580, 280))
        self.mode_mode1 = QLabel("4x4", self)
        self.mode_mode1.setFont(self.desc_font)
        self.mode_mode1.setAlignment(Qt.AlignVCenter | Qt.AlignHCenter)
        self.mode_mode1.setStyleSheet('background-color: %s; color: %s' % (self.text_color2, self.text_color1))
        self.mode_mode1.setGeometry((QRect(650, 480 - self.desk_h, 500, 85)))
        self.mode_mode2 = QLabel("3x3", self)
        self.mode_mode2.setFont(self.desc_font)
        self.mode_mode2.setAlignment(Qt.AlignVCenter | Qt.AlignHCenter)
        self.mode_mode2.setStyleSheet('background-color: %s; color: %s' % (self.text_color2, self.text_color1))
        self.mode_mode2.setGeometry((QRect(1290, 480 - self.desk_h, 500, 85)))
        self.mode_mode3 = QLabel("быстрая игра", self)
        self.mode_mode3.setFont(self.desc_font)
        self.mode_mode3.setAlignment(Qt.AlignVCenter | Qt.AlignHCenter)
        self.mode_mode3.setStyleSheet('background-color: %s; color: %s' % (self.text_color2, self.text_color1))
        self.mode_mode3.setGeometry((QRect(650, 905 - self.desk_h, 500, 85)))
        self.mode_mode4 = QLabel("пользовательский", self)
        self.mode_mode4.setFont(self.desc_font)
        self.mode_mode4.setAlignment(Qt.AlignVCenter | Qt.AlignHCenter)
        self.mode_mode4.setStyleSheet('background-color: %s; color: %s' % (self.text_color2, self.text_color1))
        self.mode_mode4.setGeometry((QRect(1290, 905 - self.desk_h, 500, 85)))
        self.mode_desc1 = QLabel("классический режим игры в 2048 со стандартным полем и правилами", self)
        self.mode_desc1.setFont(self.desc_font_mini)
        self.mode_desc1.setWordWrap(True)
        self.mode_desc1.setAlignment(Qt.AlignTop)
        self.mode_desc1.setStyleSheet('background-color: %s; color: %s' % (self.pad_color, self.text_color2))
        self.mode_desc1.setGeometry((QRect(890, 225 - self.desk_h, 275, 230)))
        self.mode_desc2 = QLabel("проверьте свои способности на уменьшенном поле!", self)
        self.mode_desc2.setFont(self.desc_font_mini)
        self.mode_desc2.setWordWrap(True)
        self.mode_desc2.setAlignment(Qt.AlignTop)
        self.mode_desc2.setStyleSheet('background-color: %s; color: %s' % (self.pad_color, self.text_color2))
        self.mode_desc2.setGeometry((QRect(890, 650 - self.desk_h, 275, 230)))
        self.mode_desc3 = QLabel("стандартное поле 4x4, но время на каждое действие ограничено!", self)
        self.mode_desc3.setFont(self.desc_font_mini)
        self.mode_desc3.setWordWrap(True)
        self.mode_desc3.setAlignment(Qt.AlignTop)
        self.mode_desc3.setStyleSheet('background-color: %s; color: %s' % (self.pad_color, self.text_color2))
        self.mode_desc3.setGeometry((QRect(1535, 225 - self.desk_h, 275, 230)))
        self.mode_desc4 = QLabel("прямоугольное поле? считанные секунды на размышление? в этом режиме можно всё!", self)
        self.mode_desc4.setFont(self.desc_font_mini)
        self.mode_desc4.setWordWrap(True)
        self.mode_desc4.setAlignment(Qt.AlignTop)
        self.mode_desc4.setStyleSheet('background-color: %s; color: %s' % (self.pad_color, self.text_color2))
        self.mode_desc4.setGeometry((QRect(1535, 650 - self.desk_h, 275, 230)))
        self.mode_img1 = QLabel(self)
        self.mode_img1.setPixmap(self.mode_img1_png)
        self.mode_img1.setGeometry((QRect(635, 225 - self.desk_h, 230, 230)))
        self.mode_img1.setStyleSheet('border-radius: 10px')
        self.mode_img2 = QLabel(self)
        self.mode_img2.setPixmap(self.mode_img2_png)
        self.mode_img2.setGeometry((QRect(635, 650 - self.desk_h, 230, 230)))
        self.mode_img2.setStyleSheet('border-radius: 10px')
        self.mode_img3 = QLabel(self)
        self.mode_img3.setPixmap(self.mode_img3_png)
        self.mode_img3.setGeometry((QRect(1275, 225 - self.desk_h, 230, 230)))
        self.mode_img3.setStyleSheet('border-radius: 10px')
        self.mode_img4 = QLabel(self)
        self.mode_img4.setPixmap(self.mode_img4_png)
        self.mode_img4.setGeometry((QRect(1275, 650 - self.desk_h, 230, 230)))
        self.mode_img4.setStyleSheet('border-radius: 10px')
        self.mode_btn1 = QPushButton(self)
        self.mode_btn1.setGeometry(QRect(610, 200 - self.desk_h, 580, 280))
        self.mode_btn1.clicked.connect(self.mode1_start)
        self.mode_btn1.setGraphicsEffect(self.opacity2)
        self.mode_btn2 = QPushButton(self)
        self.mode_btn2.setGeometry(QRect(1250, 200 - self.desk_h, 580, 280))
        self.mode_btn2.setGraphicsEffect(self.opacity3)
        self.mode_btn2.clicked.connect(self.mode2_start)
        self.mode_btn3 = QPushButton(self)
        self.mode_btn3.setGeometry(QRect(610, 625 - self.desk_h, 580, 280))
        self.mode_btn3.setGraphicsEffect(self.opacity4)
        self.mode_btn3.clicked.connect(self.mode3_start)
        self.mode_btn4 = QPushButton(self)
        self.mode_btn4.setGeometry(QRect(1250, 625 - self.desk_h, 580, 280))
        self.mode_btn4.setGraphicsEffect(self.opacity5)
        self.mode_btn4.clicked.connect(self.mode4_start)

        self.menu_font = self.fonts_parent.font()
        self.menu_font.setPointSize(30)
        self.menu_font.setBold(True)
        self.menu_pad = QWidget(self)
        self.menu_pad.setStyleSheet("background-color: %s" % self.pad_color)
        self.menu_pad.setGeometry(-350, 0, 500, self.desk_h)
        self.menu_menu = QWidget(self)
        self.menu_menu.setStyleSheet("background-color: %s; border-radius: 75px" % self.tile_color2)
        self.menu_menu.setGeometry(-450, 25, 600, 150)
        self.menu_txt = QLabel(self)
        self.menu_txt.setStyleSheet("background-color: %s; color: %s" % (self.tile_color2, self.text_color1))
        self.menu_txt.setGeometry(-350, 50, 350, 100)
        self.menu_txt.setFont(self.icon_font)
        self.menu_txt.setAlignment(Qt.AlignBottom | Qt.AlignHCenter)
        self.menu_txt.setText("меню")
        self.menu_rnd = QLabel(self)
        self.menu_rnd.setStyleSheet("background-color: %s; border-radius: 60" % self.tile_color2)
        self.menu_rnd.setGeometry(10, 40, 120, 120)
        self.menu_rnd.setPixmap(self.menu_btn_png)
        self.menu_btn = QPushButton(self)
        self.menu_btn.setGeometry(-450, 25, 600, 150)
        self.menu_btn.clicked.connect(self.move_menu)
        self.menu_btn.setGraphicsEffect(self.opacity1)
        self.menu_game_h = QWidget(self)
        self.menu_mode_h = QWidget(self)
        self.menu_theme_h = QWidget(self)
        self.menu_achievments_h = QWidget(self)
        self.menu_rules_h = QWidget(self)
        self.menu_stats_h = QWidget(self)
        self.menu_tile = QWidget(self)
        self.menu_game = QPushButton(self, text='игра')
        self.menu_mode = QPushButton(self, text='режим')
        self.menu_theme = QPushButton(self, text='тема')
        self.menu_achievments = QPushButton(self, text='достижения')
        self.menu_rules = QPushButton(self, text='правила')
        self.menu_stats = QPushButton(self, text='статистика')
        self.menu_exit = QPushButton(self, text='выход')
        self.menu_game.clicked.connect(self.window_change_game)
        self.menu_mode.clicked.connect(self.window_change_mode)
        self.menu_exit.clicked.connect(self.close)
        self.menu_game.setFont(self.menu_font)
        self.menu_mode.setFont(self.menu_font)
        self.menu_theme.setFont(self.menu_font)
        self.menu_achievments.setFont(self.menu_font)
        self.menu_rules.setFont(self.menu_font)
        self.menu_stats.setFont(self.menu_font)
        self.menu_exit.setFont(self.menu_font)
        self.menu_game.setStyleSheet("background-color: rgba(0, 0, 0, 0.0); color: %s" % self.text_color1)
        self.menu_mode.setStyleSheet("background-color: rgba(0, 0, 0, 0.0); color: %s" % self.text_color1)
        self.menu_theme.setStyleSheet("background-color: rgba(0, 0, 0, 0.0); color: %s" % self.text_color1)
        self.menu_achievments.setStyleSheet("background-color: rgba(0, 0, 0, 0.0); color: %s" % self.text_color1)
        self.menu_rules.setStyleSheet("background-color: rgba(0, 0, 0, 0.0); color: %s" % self.text_color1)
        self.menu_stats.setStyleSheet("background-color: rgba(0, 0, 0, 0.0); color: %s" % self.text_color1)
        self.menu_game.setGeometry(-475, 200, 450, 100)
        self.menu_mode.setGeometry(-475, 325, 450, 100)
        self.menu_theme.setGeometry(-475, 450, 450, 100)
        self.menu_achievments.setGeometry(-475, 575, 450, 100)
        self.menu_rules.setGeometry(-475, 700, 450, 100)
        self.menu_stats.setGeometry(-475, 825, 450, 100)
        self.menu_exit.setGeometry(-395, 975, 300, 100)
        self.menu_game_h.setStyleSheet("background-color: %s; border-radius: 10px" % self.hollow_color)
        self.menu_mode_h.setStyleSheet("background-color: %s; border-radius: 10px" % self.hollow_color)
        self.menu_theme_h.setStyleSheet("background-color: %s; border-radius: 10px" % self.hollow_color)
        self.menu_achievments_h.setStyleSheet("background-color: %s; border-radius: 10px" % self.hollow_color)
        self.menu_rules_h.setStyleSheet("background-color: %s; border-radius: 10px" % self.hollow_color)
        self.menu_stats_h.setStyleSheet("background-color: %s; border-radius: 10px" % self.hollow_color)
        self.menu_exit.setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (self.tile_color32, self.text_color2))
        self.menu_tile.setStyleSheet("background-color: %s; border-radius: 10px" % self.tile_color2)
        self.menu_tile.setGeometry(-475, 200, 450, 100)
        self.menu_game_h.setGeometry(-475, 200, 450, 100)
        self.menu_mode_h.setGeometry(-475, 325, 450, 100)
        self.menu_theme_h.setGeometry(-475, 450, 450, 100)
        self.menu_achievments_h.setGeometry(-475, 575, 450, 100)
        self.menu_rules_h.setGeometry(-475, 700, 450, 100)
        self.menu_stats_h.setGeometry(-475, 825, 450, 100)

        self.menu_widgets = (self.menu_menu, self.menu_btn, self.menu_pad, self.menu_rnd, self.menu_txt)
        self.menu_points = (self.menu_game, self.menu_mode, self.menu_theme, self.menu_achievments, self.menu_rules, self.menu_stats,
                            self.menu_game_h, self.menu_mode_h, self.menu_theme_h, self.menu_achievments_h, self.menu_rules_h, self.menu_stats_h,
                            self.menu_exit, self.menu_tile)
        self.game_widgets = (self.tiles_lst, self.hollows_lst, self.bg_plain, self.best_plain, self.score_plain, self.icon, self.score_value, self.best_value)
        self.mode_widgets = (self.mode_title, self.mode_pad1, self.mode_pad2, self.mode_pad3, self.mode_pad4, 
                             self.mode_mode1, self.mode_mode2, self.mode_mode3, self.mode_mode4,
                             self.mode_desc1, self.mode_desc2, self.mode_desc3, self.mode_desc4,
                             self.mode_img1, self.mode_img2, self.mode_img3, self.mode_img4,
                             self.mode_btn1, self.mode_btn2, self.mode_btn3, self.mode_btn4)
        self.theme_widgets = ()
        self.achievments_widgets = ()
        self.rules_widgets = ()
        self.stats_widgets = ()
        self.windows = [self.game_widgets, self.mode_widgets, self.theme_widgets, self.achievments_widgets, self.rules_widgets, self.stats_widgets]
        self.windows_btns = (self.menu_game, self.menu_mode, self.menu_theme, self.menu_achievments, self.menu_rules, self.menu_stats)
    
    def mode1_start(self):
        global winnomin
        if self.isWindowAnimEnd:
            self.game_window_del()
            self.game_window_init_new(4, 4)
            self.game_window_show()
            winnomin = 2048

    def mode2_start(self):
        global winnomin
        if self.isWindowAnimEnd:
            self.game_window_del()
            self.game_window_init_new(3, 3)
            self.game_window_show()
            winnomin = 512

    def mode3_start(self):
        pass

    def mode4_start(self):
        pass

    def window_change_game(self):
        global newwin
        if curwin != 0 and self.menu_btn.isEnabled():
            newwin = 0
            self.window_change()

    def window_change_mode(self):
        global newwin
        if curwin != 1 and self.menu_btn.isEnabled():
            newwin = 1
            self.window_change()   

    def window_change(self):
        self.windows_btns[newwin].setDisabled(True)
        window_anim_group = QParallelAnimationGroup(self)
        for widget in self.windows[curwin]:
            if isinstance(widget, list):
                for i in range(y):
                    for j in range(x):
                        window_anim = QPropertyAnimation(widget[i][j][0], b"pos")
                        window_anim.setEasingCurve(QEasingCurve.OutCubic)
                        window_anim.setEndValue(QPoint(widget[i][j][0].x(), widget[i][j][0].y() + self.desk_h))
                        window_anim.setDuration(400)
                        window_anim_group.addAnimation(window_anim)
            else:
                window_anim = QPropertyAnimation(widget, b"pos")
                window_anim.setEasingCurve(QEasingCurve.OutCubic)
                window_anim.setEndValue(QPoint(widget.x(), widget.y() + self.desk_h))
                window_anim.setDuration(400)
                window_anim_group.addAnimation(window_anim)
        for widget in self.windows[newwin]:
            if isinstance(widget, list):
                for i in range(y):
                    for j in range(x):
                        window_anim = QPropertyAnimation(widget[i][j][0], b"pos")
                        window_anim.setEasingCurve(QEasingCurve.OutCubic)
                        window_anim.setEndValue(QPoint(widget[i][j][0].x(), widget[i][j][0].y() + self.desk_h))
                        window_anim.setDuration(400)
                        window_anim_group.addAnimation(window_anim)
            else: 
                window_anim = QPropertyAnimation(widget, b"pos")
                window_anim.setEasingCurve(QEasingCurve.OutCubic)
                window_anim.setEndValue(QPoint(widget.x(), widget.y() + self.desk_h))
                window_anim.setDuration(400)
                window_anim_group.addAnimation(window_anim)
        menu_tile_anim = QPropertyAnimation(self.menu_tile, b"pos")
        menu_tile_anim.setEasingCurve(QEasingCurve.OutCubic)
        menu_tile_anim.setEndValue(QPoint(self.menu_tile.x(), 200 + 125 * newwin))
        menu_tile_anim.setDuration(400)
        window_anim_group.addAnimation(menu_tile_anim)
        self.isWindowAnimEnd = False
        window_anim_group.start()
        self.window_timer.start()

    def move_window(self):
        global curwin
        global newwin
        self.windows_btns[newwin].setDisabled(False)
        window_anim_group = QParallelAnimationGroup(self)
        for widget in self.windows[curwin]:
            if isinstance(widget, list):
                for i in range(y):
                    for j in range(x):
                        window_anim = QPropertyAnimation(widget[i][j][0], b"pos")
                        window_anim.setEndValue(QPoint(widget[i][j][0].x(), widget[i][j][0].y() - 2 * self.desk_h))
                        window_anim.setDuration(0)
                        window_anim_group.addAnimation(window_anim)
            else:
                window_anim = QPropertyAnimation(widget, b"pos")
                window_anim.setEndValue(QPoint(widget.x(), widget.y() - 2 * self.desk_h))
                window_anim.setDuration(0)
                window_anim_group.addAnimation(window_anim)
        window_anim_group.start()
        curwin = newwin
        self.window_timer.stop()
        self.isWindowAnimEnd = True
            
    def move_menu(self):
        if self.isMovingAble and self.isWindowAnimEnd:
            self.isMenuActive = not self.isMenuActive
            menu_anim_group = QParallelAnimationGroup(self)
            if not self.isMenuActive:
                shift1 = -350
                shift2 = -500
            else:
                shift1 = 350
                shift2 = 500
            for widget in self.menu_widgets:
                menu_anim = QPropertyAnimation(widget, b"pos")
                menu_anim.setEasingCurve(QEasingCurve.OutCubic)
                menu_anim.setEndValue(QPoint(widget.x() + shift1, widget.y()))
                menu_anim.setDuration(300)
                menu_anim_group.addAnimation(menu_anim)
            for widget in self.menu_points:
                menu_anim = QPropertyAnimation(widget, b"pos")
                menu_anim.setEasingCurve(QEasingCurve.OutCubic)
                menu_anim.setEndValue(QPoint(widget.x() + shift2, widget.y()))
                menu_anim.setDuration(400)
                menu_anim_group.addAnimation(menu_anim)
            for widget in self.windows[curwin]:
                if isinstance(widget, list):
                    for i in range(y):
                        for j in range(x):
                            window_anim = QPropertyAnimation(widget[i][j][0], b"pos")
                            window_anim.setEasingCurve(QEasingCurve.OutCubic)
                            window_anim.setEndValue(QPoint(widget[i][j][0].x() + shift1 // 2, widget[i][j][0].y()))
                            window_anim.setDuration(400)
                            menu_anim_group.addAnimation(window_anim)
                else:
                    window_anim = QPropertyAnimation(widget, b"pos")
                    window_anim.setEasingCurve(QEasingCurve.OutCubic)
                    window_anim.setEndValue(QPoint(widget.x() + shift1 // 2, widget.y()))
                    window_anim.setDuration(400)
                    menu_anim_group.addAnimation(window_anim)
            menu_anim_group.start()
            self.menu_btn.setEnabled(False)
            self.menu_timer.start()

    def get_game_state(self):
        global winnomin
        for i in range(y):
            for j in range(x):
                if self.game_area[i][j][0] == None:
                    return 'continue'
                if self.game_area[i][j][2] == winnomin:
                    return 'win'
        for i in range(y-1):
            for j in range(x-1):
                if self.game_area[i][j][2] == self.game_area[i][j + 1][2] or self.game_area[i][j][2] == self.game_area[i + 1][j][2]:
                    return 'continue'
        return 'end'
    
    def move_tiles(self, direction: str):
        global changes
        global score
        if direction == 'left':
            for i in range(y):
                for j in range(1, x):
                    new_pos = j - 1
                    if self.game_area[i][j][0] == None:
                        continue
                    while new_pos != -1 and self.game_area[i][new_pos][0] == None:
                        new_pos -= 1
                    if new_pos == -1 or self.game_area[i][new_pos][2] != self.game_area[i][j][2]:
                        new_pos += 1
                        self.game_area[i][new_pos] = self.game_area[i][j]
                        if new_pos != j:
                            self.game_area[i][j] = [None, None, 2]
                            changes = True
                    else:
                        if self.game_area[i][new_pos][1] == None:
                            self.game_area[i][new_pos][1] = self.game_area[i][j][0]
                            self.game_area[i][new_pos][2] *= 2
                            score += self.game_area[i][new_pos][2]
                            self.game_area[i][j] = [None, None, 2]
                            changes = True
                        else:
                            new_pos += 1
                            self.game_area[i][new_pos] = self.game_area[i][j]
                            self.game_area[i][j] = [None, None, 2]
                            changes = True

        if direction == 'right':
            for i in range(y):
                for j in range(x-2, -1, -1):
                    new_pos = j + 1
                    if self.game_area[i][j][0] == None:
                        continue
                    while new_pos != x and self.game_area[i][new_pos][0] == None:
                        new_pos += 1
                    if new_pos == x or self.game_area[i][new_pos][2] != self.game_area[i][j][2]:
                        new_pos -= 1
                        self.game_area[i][new_pos] = self.game_area[i][j]
                        if new_pos != j:
                            self.game_area[i][j] = [None, None, 2]
                            changes = True
                    else:
                        if self.game_area[i][new_pos][1] == None:
                            self.game_area[i][new_pos][1] = self.game_area[i][j][0]
                            self.game_area[i][new_pos][2] *= 2
                            score += self.game_area[i][new_pos][2]
                            self.game_area[i][j] = [None, None, 2]
                            changes = True
                        else:
                            new_pos -= 1
                            self.game_area[i][new_pos] = self.game_area[i][j]
                            self.game_area[i][j] = [None, None, 2]
                            changes = True

        if direction == 'up':
            for j in range(x):
                for i in range(1, y):
                    new_pos = i - 1
                    if self.game_area[i][j][0] == None:
                        continue
                    while new_pos != -1 and self.game_area[new_pos][j][0] == None:
                        new_pos -= 1
                    if new_pos == -1 or self.game_area[new_pos][j][2] != self.game_area[i][j][2]:
                        new_pos += 1
                        self.game_area[new_pos][j] = self.game_area[i][j]
                        if new_pos != i:
                            self.game_area[i][j] = [None, None, 2]
                            changes = True
                    else:
                        if self.game_area[new_pos][j][1] == None:
                            self.game_area[new_pos][j][1] = self.game_area[i][j][0]
                            self.game_area[new_pos][j][2] *= 2
                            score += self.game_area[new_pos][j][2]
                            self.game_area[i][j] = [None, None, 2]
                            changes = True
                        else:
                            new_pos += 1
                            self.game_area[new_pos][j] = self.game_area[i][j]
                            self.game_area[i][j] = [None, None, 2]
                            changes = True

        if direction == 'down':
            for j in range(x):
                for i in range(y-2, -1, -1):
                    new_pos = i + 1
                    if self.game_area[i][j][0] == None:
                        continue
                    while new_pos != y and self.game_area[new_pos][j][0] == None:
                        new_pos += 1
                    if new_pos == y or self.game_area[new_pos][j][2] != self.game_area[i][j][2]:
                        new_pos -= 1
                        self.game_area[new_pos][j] = self.game_area[i][j]
                        if new_pos != i:
                            self.game_area[i][j] = [None, None, 2]
                            changes = True
                    else:
                        if self.game_area[new_pos][j][1] == None:
                            self.game_area[new_pos][j][1] = self.game_area[i][j][0]
                            self.game_area[new_pos][j][2] *= 2
                            score += self.game_area[new_pos][j][2]
                            self.game_area[i][j] = [None, None, 2]
                            changes = True
                        else:
                            new_pos -= 1
                            self.game_area[new_pos][j] = self.game_area[i][j]
                            self.game_area[i][j] = [None, None, 2]
                            changes = True

        for i in range(y):
            for j in range(x):
                if self.game_area[i][j][0] != None:
                    tile_anim = QPropertyAnimation(self.game_area[i][j][0], b"pos")
                    tile_anim.setEndValue(QPoint(self.game_area_pos[i][j][0], self.game_area_pos[i][j][1]))
                    tile_anim.setDuration(200)
                    tile_anim.setEasingCurve(QEasingCurve.OutCubic)
                    self.pos_anim.addAnimation(tile_anim)
                    if self.game_area[i][j][1] != None:
                        tile_anim = QPropertyAnimation(self.game_area[i][j][1], b"pos")
                        tile_anim.setEndValue(QPoint(self.game_area_pos[i][j][0], self.game_area_pos[i][j][1]))
                        tile_anim.setDuration(200)
                        tile_anim.setEasingCurve(QEasingCurve.OutCubic)
                        self.pos_anim.addAnimation(tile_anim)
        self.pos_anim.start()

    def game_window_del(self):
        for widget in self.windows[0]:
            if isinstance(widget, list):
                for i in range(y):
                    for j in range(x):
                        widget[i][j][0].deleteLater()
                        del widget[i][j][0]
            else:
                widget.deleteLater()
                del widget

    def game_window_show(self):
        for widget in self.windows[0]:
            if isinstance(widget, list):
                for i in range(y):
                    for j in range(x):
                        widget[i][j][0].show()
            else:
                widget.show()

    def game_window_init_new(self, xsize, ysize):
        self.game_window_init(xsize, ysize)
        self.game_widgets = (self.tiles_lst, self.hollows_lst, self.bg_plain, self.best_plain, self.score_plain, self.icon, self.score_value, self.best_value)
        self.windows[0] = self.game_widgets
        new_game_init_anim_group = QParallelAnimationGroup(self)
        for widget in self.windows[0]:
                if isinstance(widget, list):
                    for i in range(y):
                        for j in range(x):
                            new_game_init_anim = QPropertyAnimation(widget[i][j][0], b"pos")
                            new_game_init_anim.setEndValue(QPoint(widget[i][j][0].x() + 175, widget[i][j][0].y() - self.desk_h))
                            new_game_init_anim.setDuration(0)
                            new_game_init_anim_group.addAnimation(new_game_init_anim)
                else:
                    new_game_init_anim = QPropertyAnimation(widget, b"pos")
                    new_game_init_anim.setEndValue(QPoint(widget.x() + 175, widget.y() - self.desk_h))
                    new_game_init_anim.setDuration(0)
                    new_game_init_anim_group.addAnimation(new_game_init_anim)
        new_game_init_anim_group.start()
        self.window_change_game()

    def game_window_init(self, xsize, ysize):
        global x
        global y
        global score
        x = xsize
        y = ysize
        score = 0
        self.isMovingAble = True
        self.game_area_pos = [[[] for j in range(x)] for i in range(y)]
        self.game_area = [[[None, None, 2] for j in range(x)] for i in range(y)]
        self.color_dict = {2: self.tile_color2,
                           4: self.tile_color4,
                           8: self.tile_color8,
                           16: self.tile_color16,
                           32: self.tile_color32,
                           64: self.tile_color64,
                           128: self.tile_color128,
                           256: self.tile_color256,
                           512: self.tile_color512,
                           1024: self.tile_color1024,
                           2048: self.tile_color2048
                           }
        
        self.tileposy = round(self.desk_h - 162.5 * y) // 2
        for i in range(y):
            self.tileposx = round(self.desk_w - 162.5 * x) // 2
            self.tileposy += 10
            if y == 6:
                self.tileposy += 1
            if i > 0:
                self.tileposy += self.tilesize
            for j in range(x):
                self.tileposx += 10
                if x == 6:
                    self.tileposx += 1
                if j > 0:
                    self.tileposx += self.tilesize                
                self.game_area_pos[i][j].append(self.tileposx)
                self.game_area_pos[i][j].append(self.tileposy)

        self.bg_plain = QWidget(self)
        self.bg_plain.setStyleSheet("background-color: %s; border-radius: 10px" % self.pad_color)
        self.bg_plain.setGeometry(round(self.desk_w - 162.5 * x) // 2, round(self.desk_h - 162.5 * y) // 2, round(162.5 * x), round(162.5 * y))

        self.score_plain = QLabel("счёт", self)
        self.score_plain.setGeometry((self.desk_w - 650) // 2 + 300, round(self.desk_h - 162.5 * y) // 2 - 100, 150, 75)
        self.score_plain.setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (self.tile_color2, self.text_color1))
        self.score_plain.setFont(self.score_plain_font)
        self.score_plain.setAlignment(Qt.AlignHCenter)

        self.score_value = QLabel(str(score), self)
        self.score_value.setGeometry((self.desk_w - 650) // 2 + 300, round(self.desk_h - 162.5 * y) // 2 - 67, 150, 30)
        self.score_value.setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (self.tile_color2, self.text_color2))
        self.score_value.setFont(self.score_plain_font)
        self.score_value.setAlignment(Qt.AlignHCenter)

        self.best_plain = QLabel("лучший", self)
        self.best_plain.setGeometry((self.desk_w - 650) // 2 + 490, round(self.desk_h - 162.5 * y) // 2 - 100, 150, 75)
        self.best_plain.setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (self.tile_color2, self.text_color1))
        self.best_plain.setFont(self.score_plain_font)
        self.best_plain.setAlignment(Qt.AlignHCenter)

        self.best_value = QLabel(str(best), self)
        self.best_value.setGeometry((self.desk_w - 650) // 2 + 490, round(self.desk_h - 162.5 * y) // 2 - 67, 150, 30)
        self.best_value.setStyleSheet("background-color: %s; color: %s; border-radius: 10px" % (self.tile_color2, self.text_color2))
        self.best_value.setFont(self.score_plain_font)
        self.best_value.setAlignment(Qt.AlignHCenter)

        self.icon = QLabel(self)
        self.icon.setText("2048")
        self.icon.setGeometry((self.desk_w - 650) // 2 + 8, round(self.desk_h - 162.5 * y) // 2 - 112, 255, 90)
        self.icon.setFont(self.icon_font)
        self.icon.setStyleSheet("color: %s" % self.text_color1)

        self.tiles_lst = list()
        self.hollows_lst = list()
        
        for i in range(y):
            self.hollows_lst.append([])
            for j in range(x):
                globals()['hollow' + str(i*(j+1) + j+1)] = QWidget(self)
                self.hollows_lst[i].append([globals()['hollow' + str(i*(j+1) + j+1)]])

        for i in range(y):
            self.tiles_lst.append([])
            for j in range(x):
                globals()['tile' + str(i*(j+1) + j+1)] = QLabel(self)
                self.tiles_lst[i].append([globals()['tile' + str(i*(j+1) + j+1)], False])
        self.pos_anim = QParallelAnimationGroup()
        self.size_anim = QParallelAnimationGroup()
        for _ in range(2):
            self.add_tile()
        for i in range(y):
            for j in range(x):
                self.tiles_lst[i][j][0].setGeometry(self.game_area_pos[i][j][0], self.game_area_pos[i][j][1], 0, 0)
                self.tiles_lst[i][j][0].setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
                self.hollows_lst[i][j][0].setStyleSheet("background-color: %s; border-radius: 10px" % self.hollow_color)
                self.hollows_lst[i][j][0].setGeometry(self.game_area_pos[i][j][0], self.game_area_pos[i][j][1], self.tilesize, self.tilesize)
        
    def enable_moving(self):
        self.timer_times += 1
        if self.timer_times == 2:
            self.add_tile()
            self.action_timer.setInterval(100)
        elif self.timer_times == 3:
            self.action_timer.stop()
            match self.get_game_state():
                case 'win':
                    self.setStyleSheet('background-color: green')
                case 'end':
                    self.setStyleSheet('background-color: red')
                case 'continue':
                    pass
            self.isMovingAble = True
        else:
            for i in range(y):
                for j in range(x):
                    if self.game_area[i][j][0] != None:
                        if self.game_area[i][j][2] < 8:
                            text_color = self.text_color1
                        else:
                            text_color = self.text_color2
                        if self.game_area[i][j][2] < 4096:
                            bg_color = self.color_dict[self.game_area[i][j][2]]
                        else:
                            bg_color = self.text_color1
                        self.game_area[i][j][0].setStyleSheet(f'background-color: {bg_color}; color: {text_color}; border-radius: 10')
                        self.game_area[i][j][0].setText(str(self.game_area[i][j][2]))
                        new_tile_font = self.tile_font
                        new_tile_font.setPointSize(44 - len(str(self.game_area[i][j][2])) * 4)
                        if new_tile_font.pointSize() < 10:
                            new_tile_font.setPointSize(10)
                        self.game_area[i][j][0].setFont(new_tile_font)
                        if self.game_area[i][j][1] != None:
                            self.game_area[i][j][1].setGeometry(self.game_area_pos[i][j][0], self.game_area_pos[i][j][1], 0, 0)
                            for r in range(y):
                                for c in range(x):
                                    if self.tiles_lst[r][c][0] == self.game_area[i][j][1]:
                                        self.tiles_lst[r][c][1] = False
                                        self.game_area[i][j][1] = None
            self.action_timer.setInterval(50)

    def enable_menu_moving(self):
        self.menu_btn.setEnabled(True)
        self.menu_timer.stop()

    def add_tile(self):
        sec_break = False
        for i in range(y):
            if sec_break:
                break
            for j in range(x):
                if not self.tiles_lst[i][j][1]:
                    self.tiles_lst[i][j][1] = True
                    r, c = random.randint(0, y-1), random.randint(0, x-1)
                    while self.game_area[r][c][0] != None:
                        r, c = random.randint(0, y-1), random.randint(0, x-1)
                    if random.randint(1, 10) == 1:
                        self.game_area[r][c][2] = 4
                    else:
                        self.game_area[r][c][2] = 2
                    self.game_area[r][c][0] = self.tiles_lst[i][j][0]
                    self.game_area[r][c][0].setVisible(True)
                    self.game_area[r][c][0].setText(str(self.game_area[r][c][2]))
                    self.game_area[r][c][0].setGeometry(QRect(self.game_area_pos[r][c][0], self.game_area_pos[r][c][1], 0, 0))
                    new_tile_font = self.tile_font
                    new_tile_font.setPointSize(44 - len(str(self.game_area[r][c][2])) * 4)
                    if new_tile_font.pointSize() < 7:
                            new_tile_font.setPointSize(10)
                    self.game_area[r][c][0].setFont(new_tile_font)
                    size_anim = QPropertyAnimation(self.game_area[r][c][0], b'geometry')
                    size_anim.setStartValue(QRect(self.game_area[r][c][0].geometry().adjusted(70, 70, 0, 0)))
                    size_anim.setEndValue(QRect(self.game_area[r][c][0].geometry().adjusted(0, 0, self.tilesize, self.tilesize)))
                    size_anim.setEasingCurve(QEasingCurve.InOutQuad)
                    size_anim.setDuration(100)
                    if self.game_area[r][c][2] < 8:
                        text_color = self.text_color1
                    else:
                        text_color = self.text_color2
                    if self.game_area[r][c][2] < 4096:
                        bg_color = self.color_dict[self.game_area[r][c][2]]
                    else:
                        bg_color = self.text_color1
                    self.game_area[r][c][0].setStyleSheet(f'background-color: {bg_color}; color: {text_color}; border-radius: 10')
                    self.size_anim.addAnimation(size_anim)
                    sec_break = True
                    break
            self.size_anim.start()

    def keyPressEvent(self, e):
        global changes, curwin
        global score
        global best
        global x
        global y
        changes = False
        if self.isMovingAble and not self.isMenuActive and curwin == 0 and self.menu_btn.isEnabled():
            self.pos_anim = QParallelAnimationGroup()
            self.size_anim = QParallelAnimationGroup()
            if e.key() == Qt.Key_Q or e.key() == 1049:
                self.close()
            elif e.key() == Qt.Key_D or e.key() == Qt.Key_Right or e.key() == 1042:
                self.move_tiles('right')
            elif e.key() == Qt.Key_A or e.key() == Qt.Key_Left or e.key() == 1060:
                self.move_tiles('left')
            elif e.key() == Qt.Key_W or e.key() == Qt.Key_Up or e.key() == 1062:
                self.move_tiles('up')
            elif e.key() == Qt.Key_S or e.key() == Qt.Key_Down or e.key() == 1067:
                self.move_tiles('down')
            if changes:
                self.score_value.setText(str(score))
                if score > best:
                    best = score
                    self.best_value.setText(str(best))
                self.isMovingAble = False
                self.timer_times = 0
                self.action_timer.start()

app = QApplication(sys.argv)
main_window = MainWindow()
main_window.showMaximized()
sys.exit(app.exec_())